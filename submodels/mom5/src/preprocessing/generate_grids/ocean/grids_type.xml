<?xml version="1.0" standalone="no"?>
<!DOCTYPE MODULE SYSTEM 
          "/net2/nnz/opt/tools/xmlDoc/share/xmlDoc/schema/fms.dtd">
<MODULE NAME="grids_type_mod" DATE="0000/00/00 00:00:00" HISTORY="http://cobweb.gfdl.noaa.gov/fms-cgi-bin/viewcvs/preprocessing/generate_grids/ocean"><CONTACT EMAIL="GFDL.Climate.Model.Info@noaa.gov">Z. Liang </CONTACT><REVIEWER EMAIL="GFDL.Climate.Model.Info@noaa.gov">S. M. Griffies</REVIEWER><OVERVIEW>
   Define grid types, including cell type, horizontal grid, vertical grid and topography type
 </OVERVIEW><DESCRIPTION>
    From discussions with Robert Hallberg, as a prototype for ESMF
</DESCRIPTION><USE NAME="mpp_domains_mod"/><PUBLICTYPE>  type cell_type
     real, dimension(:,:), pointer   :: x =&gt; NULL()        ! geographical longitude of cell center
     real, dimension(:,:), pointer   :: y =&gt; NULL()        ! geographical latitude of cell center 
     real, dimension(:,:,:), pointer :: x_vert =&gt; NULL()   ! geographical longitude of cell vertices
     real, dimension(:,:,:), pointer :: y_vert =&gt; NULL()   ! geographical latitude of cell vertices
     real, dimension(:,:), pointer   :: area =&gt; NULL()     ! cell area
     real, dimension(:,:), pointer   :: angle =&gt; NULL()    ! Angle between i-unit and x-unit vector of cell
     real, dimension(:,:), pointer   :: ds_00_02 =&gt; NULL() ! Length of western face of cell
     real, dimension(:,:), pointer   :: ds_20_22 =&gt; NULL() ! Length of eastern face of cell
     real, dimension(:,:), pointer   :: ds_02_22 =&gt; NULL() ! Length of northern face of cell
     real, dimension(:,:), pointer   :: ds_00_20 =&gt; NULL() ! Length of southern face of cell
     real, dimension(:,:), pointer   :: ds_01_21 =&gt; NULL() ! width of cell
     real, dimension(:,:), pointer   :: ds_10_12 =&gt; NULL() ! height of cell
     real, dimension(:,:), pointer   :: ds_00_01 =&gt; NULL() ! Distance from southwest corner to western face center of cell
     real, dimension(:,:), pointer   :: ds_01_02 =&gt; NULL() ! Distance from northwest corner to western face center of cell
     real, dimension(:,:), pointer   :: ds_02_12 =&gt; NULL() ! Distance from northwest corner to northern face center of cell
     real, dimension(:,:), pointer   :: ds_12_22 =&gt; NULL() ! Distance from northeast corner to northern face center of cell
     real, dimension(:,:), pointer   :: ds_21_22 =&gt; NULL() ! Distance from northeast corner to eastern face center of cell
     real, dimension(:,:), pointer   :: ds_20_21 =&gt; NULL() ! Distance from southeast corner to eastern face center of cell
     real, dimension(:,:), pointer   :: ds_10_20 =&gt; NULL() ! Distance from southeast corner to southern face center of cell
     real, dimension(:,:), pointer   :: ds_00_10 =&gt; NULL() ! Distance from southwest corner to southern face center of cell
     real, dimension(:,:), pointer   :: ds_01_11 =&gt; NULL() ! Distance from center to western face of cell
     real, dimension(:,:), pointer   :: ds_11_12 =&gt; NULL() ! Distance from center to northern face of cell
     real, dimension(:,:), pointer   :: ds_11_21 =&gt; NULL() ! Distance from center to eastern face of cell 
     real, dimension(:,:), pointer   :: ds_10_11 =&gt; NULL() ! Distance from center to southern face of cell
  end type cell_type</PUBLICTYPE><PUBLICTYPE>  type hgrid_data_type
     type(cell_type) :: T             ! T-cell
     type(cell_type) :: E             ! E-cell
     type(cell_type) :: N             ! N-cell
     type(cell_type) :: C             ! C-cell
     logical         :: tripolar_grid ! true means tripolar grid
     logical         :: cyclic_x      ! true means cyclic in i-direction
     logical         :: cyclic_y      ! true means cyclic in j-direction
     integer         :: ni, nj        ! grid size
     type(domain2d)  :: Domain
  end type hgrid_data_type</PUBLICTYPE><PUBLICTYPE>  type vgrid_data_type
     real, dimension(:), pointer :: zt =&gt; NULL()   ! vertical level at T-cell center 
     real, dimension(:), pointer :: zb =&gt; NULL()   ! vertical level at T-cell boundary
  end type vgrid_data_type</PUBLICTYPE><PUBLICTYPE>  type topog_data_type
     real, dimension(:,:), pointer :: depth_t =&gt; NULL()    ! topographic depth of T-cell
     real, dimension(:,:), pointer :: num_levels =&gt; NULL() ! number of vertical T-cells
     real, dimension(:,:), pointer :: wet =&gt; NULL()        ! wet mask of T-cell
     real, dimension(:,:), pointer :: depth_c =&gt; NULL()    ! topographic depth of C-cell
     real, dimension(:,:), pointer :: num_levels_c =&gt; NULL() ! number of vertical C-cells
     real, dimension(:,:), pointer :: wet_c =&gt; NULL()        ! wet mask of C-cell
  end type topog_data_type</PUBLICTYPE></MODULE>
