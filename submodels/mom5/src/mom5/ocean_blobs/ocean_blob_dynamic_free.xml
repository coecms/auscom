<?xml version="1.0" standalone="no"?>
<!DOCTYPE MODULE SYSTEM 
          "/net2/nnz/opt/tools/xmlDoc/share/xmlDoc/schema/fms.dtd">
<MODULE NAME="ocean_blob_dynamic_free_mod" DATE="0000/00/00 00:00:00" HISTORY="http://cobweb.gfdl.noaa.gov/fms-cgi-bin/viewcvs/FMS/ocean/mom5/ocean_blobs"><CONTACT EMAIL="m.bates@student.unsw.edu.au"> Michael L. Bates
</CONTACT><CONTACT EMAIL="GFDL.Climate.Model.Info@noaa.gov"> Stephen M. Griffies
</CONTACT><OVERVIEW>
 This module runs the dynamic free blob implementation of the embedded
 Lagrangian blob framework.  The module forms new dynamic free blobs,
 integrates the properties of existing blobs, and handles the transfer
 of bottom blobs to free blobs.
</OVERVIEW><DESCRIPTION>
 Free blobs are formed using the subroutine blob_dynamic_free_implicit,
 which is called from the blob driver module.  Free blobs must be formed 
 implicitly in time so that the surface forcing has already been applied.
 
 The properties of free blobs are also integrated in this module, that is,
 position, velocity, mass and tracer content.  Position and velocity are
 integrated using an adaptive step Runge-Kutta scheme.  There are several
 schemes available of varying order.

 The module also receives blobs that are transferring from the bottom
 blob dynamic regime to the free blob regime (i.e. they have separated
 from the bottom boundary).
</DESCRIPTION><INFO><REFERENCE>
  Bogacki, P., Shampine, L.F., (1989) A 3(2) pair of Runge-Kutta formulas.
  Applied Mathematical Letters 2(4), 321-325.
 </REFERENCE><REFERENCE>
  Cash, J.R., Karp, A.H. (1990) A variable order Runge-Kutta method for 
  initial value problems with rapidly varying right-hand sides.
  ACM Transactions on Mathematical Software 16(3), 201-222.
 </REFERENCE><REFERENCE>
  Griffies, S.M., Harrison, M.J., Pacanowski, R.C., Rosati, A. (2004)
  A Technical Guide to MOM4.  GFDL Ocean Group Technical Report No. 5.
  NOAA/Geophysical Fluid Dynamics Laboratory.
 </REFERENCE><REFERENCE>
  Marshall, J., Schott, F. (1999) Open-ocean convection: Observations, theory,
  and models.  Reviews of Geophysics 37(1), 1-64.
 </REFERENCE><NAMELIST NAME="ocean_blob_dynamic_free_nml"><DATA NAME="use_this_module" TYPE="logical">
  Must be true to use this module.
  Default is use_this_module=.false.
  </DATA><DATA NAME="rayleigh_drag_new" TYPE="real">
  Rayleigh drag coefficient (1/s) for new blobs that
  are formed due to the vertical instability
  criterion.  Corresponds to alpha in the notes.  
  Default is rayleigh_drag_new=1.0e-5
  </DATA><DATA NAME="rayleigh_drag_bot" TYPE="real">
  Rayleigh drag coefficient (1/s) for bottom blobs
  that become free blobs.  Corresponds to alpha in 
  the notes.
  Default is rayleigh_drag_bot=1.0e-7
  </DATA><DATA NAME="update_method" TYPE="character">
  Decide which method to use to integrate the 
  blobs.  Choices are 'BS_RK3(2)' or 'CK_RK5(4)'
  for the Bogaki-Shampine or Cash-Karp methods
  respectively.
  Default is update_method='CK_RK5(4)
  </DATA><DATA NAME="rel_error" TYPE="real">
  Relative error for the RK scheme (dimensionless).
  A smaller number is more accurate, but, 
  is more computationally expensive. Corresponds to
  zeta* in the notes.
  Must be 0&lt;rel_error&lt;=1.0
  Default is rel_error=0.01
  </DATA><DATA NAME="safety_factor" TYPE="real">
  Safety factor for the RK scheme (dimensionless).
  A smaller number should reduce the number
  of rejected steps, but, decreases the locally
  extrapolated step.  Corresponds to varrho in 
  the notes.
  Must be 0&lt;safety_factor&lt;=1.0
  Default is safety_factor=0.8
  </DATA><DATA NAME="minstep" TYPE="real">
  Minimum step size (in seconds) for a blob.
  Default is minstep=9.0
  </DATA><DATA NAME="size_fact" TYPE="real">
  An Adjustment for blob size, 0&lt;size_fact&lt;=1.0
  Corresponds to Lambda in the notes.
  Default is size_fact=1.0
  </DATA><DATA NAME="det_param" TYPE="real">
  The detrainment parameter (kg m^2/s). 
  Corresponds to Gamma in the notes.
  Default is det_param=5.0e-8
  </DATA><DATA NAME="max_detrainment" TYPE="real">
  The Maximum allowable detrainment velocity (m/s).
  Default is max_detrainment=1.0e-3
  </DATA><DATA NAME="bv_freq_threshold" TYPE="real">
  The buoyancy frequency threshold at which 
  the scheme will start to create blobs, i.e.
  blobs will be formed when N^2&lt;bv_freq_threshold
  Default is bv_freq_threshold=-1.0e-15
  </DATA><DATA NAME="full_N2" TYPE="logical">
  Whether to use the buoyancy frequency calculated
  from the combined E and L system (true) or, from
  the E system only (false).
  Default is full_N2=.true.
  </DATA><DATA NAME="large_speed" TYPE="real">
  A value for error checking.  If the speed of a
  blob exceeds large_speed in any of x,y,z then
  a warning flag is raised.
  Default is large_speed=10.0
  </DATA></NAMELIST></INFO><USE NAME="       constants_mod"/><USE NAME="    diag_manager_mod"/><USE NAME="             fms_mod"/><USE NAME="             mpp_mod"/><USE NAME="     mpp_domains_mod"/><USE NAME=" ocean_blob_util_mod"/><USE NAME="   ocean_density_mod"/><USE NAME="ocean_parameters_mod"/><USE NAME="     ocean_types_mod"/><USE NAME="      ocean_util_mod"/><USE NAME=" ocean_workspace_mod"/><SUBROUTINE NAME="blob_dynamic_free_init" INTERFACE=""><DESCRIPTION>
 Initialises the dynamic free blobs by checking the namelist and also
 inherited namelists (from ocean_blob_nml).  Also sets up some useful
 constants, allocates memory to special halo=2 masks and sets up 
 the blob buffers for sending blobs from one PE to another.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="blob_dynamic_free_implicit" INTERFACE=""><DESCRIPTION>
 Initialises dynamic blobs in vertical statically unstable regions.
 Due to the instability condition, blobs should be formed after the
 surface forcing has been applied (which is a major source of 
 instability in the water column).  The surface forcing is applied
 implicitly in time in MOM, therefore, we must form blobs implicitly
 in time.

 If N^2&lt;bv_freq_threshold, then, two blobs are formed.  One rising
 and one sinking.  The rising blobs is destroyed immediately (after
 it has been moved up one cell) and its properties returned to the E
 system.  The sinking blob is added to a linked list, and its 
 properties integrated at a later time step.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="blob_dynamic_free_update" INTERFACE=""><DESCRIPTION>
 This routine calls the routine to update blob positions.  When
 bitwise_reproduction=.false., it also figures out when to continue
 the integration of blobs that have changed PE's.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="dynamic_update" INTERFACE=""><DESCRIPTION>
 This routine contains the RK scheme used to integrate the position 
 and velocity of blobs.  It also does many checks for (and 
 subsequently handles) things like grounding of blobs, blobs going to
 different PEs, blobs that interact with topography, blobs that 
 detrain to less than small_mass and blobs going outside the compute 
 domain.  

 It also does the interpolation of E system variables to a blob.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="transfer_bottom_to_free" INTERFACE=""><DESCRIPTION>
 Takes bottom blobs that have separated from the bottom boundary and
 turns it into a free blob.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="blob_dynamic_free_end" INTERFACE=""><DESCRIPTION>
 Clears memory to give a nice clean ending to the run.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="packbuffer" INTERFACE=""><DESCRIPTION>
 Packs a buffer with all the information needed to send a blob from
 one PE to another.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="unpackbuffer" INTERFACE=""><DESCRIPTION>
 Unpacks a received buffer.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="increase_buffer" INTERFACE=""><DESCRIPTION>
 Increases the buffer size for sending blobs from one PE to another.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="send_buffer" INTERFACE=""><DESCRIPTION>
 Sends a buffer to an adjoining PE
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="receive_buffer" INTERFACE=""><DESCRIPTION>
 Receives a buffer from an adjoining PE
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="clear_buffer" INTERFACE=""><DESCRIPTION>
 Clears the contents of a buffer
 </DESCRIPTION></SUBROUTINE></MODULE>
