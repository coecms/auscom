<?xml version="1.0" standalone="no"?>
<!DOCTYPE MODULE SYSTEM 
          "/net2/nnz/opt/tools/xmlDoc/share/xmlDoc/schema/fms.dtd">
<MODULE NAME="ocean_nphysicsB_mod" DATE="2012/05/17 13:41:47" HISTORY="http://cobweb.gfdl.noaa.gov/fms-cgi-bin/viewcvs/FMS/ocean/mom5/ocean_param/neutral"><CONTACT EMAIL="GFDL.Climate.Model.Info@noaa.gov"> Stephen M. Griffies
</CONTACT><CONTACT EMAIL="Russell.Fiedler@csiro.au"> Russell Fiedler 
</CONTACT><REVIEWER EMAIL="tim.leslie@gmail.com"> Tim Leslie
</REVIEWER><OVERVIEW>
 Thickness weighted and density weighted time tendency for tracer 
 from Laplacian neutral diffusion + Laplacian GM skew-diffusion.
</OVERVIEW><DESCRIPTION>
 This module computes the cell thickness weighted and density 
 weighted tracer tendency from small angle Laplacian neutral diffusion
 plus Laplacian GM skew-diffusion.  The methods here differ from 
 ocean_nphysicsA in the treatment of fluxes in the boundary
 regions. This module is experimental, and should be used with caution. 
</DESCRIPTION><INFO><REFERENCE>
 S.M. Griffies, A. Gnanadesikan, R.C. Pacanowski, V. Larichev, 
 J.K. Dukowicz,  and R.D. Smith
 Isoneutral diffusion in a z-coordinate ocean model
 Journal of Physical Oceanography (1998) vol 28 pages 805-830
 </REFERENCE><REFERENCE>
 S.M. Griffies 
 The Gent-McWilliams Skew-flux 
 Journal of Physical Oceanography (1998) vol 28 pages 831-841
 </REFERENCE><REFERENCE>
 R. Ferrari and J.C. McWilliams and Canuto and Dubovikov  
 Parameterization of eddy fluxes near oceanic boundaries
 Journal of Climate (2008). 
 </REFERENCE><REFERENCE>
 Large etal (1997), Journal of Physical Oceanography, 
 pages 2418-2447 
 </REFERENCE><REFERENCE>
 S.M. Griffies 
 Fundamentals of Ocean Climate Models (2004)
 Princeton University Press 
 </REFERENCE><REFERENCE>
 S.M. Griffies, Elements of MOM (2012)
 </REFERENCE><NOTE>
 Revisions made for MOM4p1 in Sept 2005, Jan/Feb 2006,
 and June 2008 by Stephen.Griffies. The June 2008
 revision greatly simplified the boundary layer formulation
 from Ferrari and McWilliams, whereby the quadratic transition
 layer is eliminated, thus removing the need to match vertical
 derivatives of the streamfunction.  The matching conditions
 implied by the transition zone added a tremendous amount 
 of code that was not seen to be critical for the purpose 
 of producing a reasonably smooth streamfunction.  
 </NOTE><NOTE>
 Numerical implementation of the flux components follows the triad 
 approach documented in the references and implemented in MOM2 and MOM3.  
 The MOM algorithm accounts for partial bottom cells and generalized
 orthogonal horizontal coordinates.
 </NOTE><NOTE>
 Note: the option neutral_physics_simple is not supported in this 
 module.  Use nphysicA for that option. 
 </NOTE></INFO><NAMELIST NAME="ocean_nphysicsB_nml"><DATA NAME="use_this_module" TYPE="logical">
  Must be true to use this module. Default is false.
  </DATA><DATA NAME="debug_this_module" TYPE="logical">
  For printing starting and ending checksums for restarts
  </DATA><DATA NAME="use_gm_skew" TYPE="logical">
  Must be true to use GM skewsion.  Set to false if wish to 
  incorporate the "GM-effect" through form drag, as in 
  ocean_form_drag module. Default use_gm_skew=.true. 
  </DATA><DATA NAME="diffusion_all_explicit" TYPE="logical">
  To compute all contributions from neutral diffusion explicitly in time, including
  the K33 diagonal piece.  This approach is available only when have small time 
  steps and/or running with just a single tracer.  It is for testing purposes. 
  </DATA><DATA NAME="neutral_physics_limit" TYPE="logical">
  When tracer falls outside a specified range, revert to horizontal 
  diffusive fluxes at this cell. This is an ad hoc and incomplete attempt
  to maintain monotonicity with the neutral physics scheme.  
  Default neutral_physics_limit=.true.
  </DATA><DATA NAME="tmask_neutral_on" TYPE="logical">
  If .true. then this logical reduces the neutral fluxes to 
  horizontal/vertical diffusion next to boundaries.  
  This approach has been found to reduce spurious 
  extrema resulting from truncation of triads used to compute 
  a neutral flux component.  Default tmask_neutral_on=.false.    
  </DATA><DATA NAME="surf_turb_thick_min_k" TYPE="integer">
  Minimum number of k-levels in surface turbulent boundary
  layer used in the transition of the neutral physics fluxes
  to the surface. Default surf_turb_thick_min_k = 2.
  </DATA><DATA NAME="surf_turb_thick_min" TYPE="real">
  Minimum thickness of surface turbulent boundary layer
  used in the transition of the neutral physics fluxes
  to the surface. Default surf_turb_thick_min=20m.
  </DATA><DATA NAME="neutral_damping_time" UNITS="days" TYPE="real">
  The damping time used for determining the effective surface
  boundary layer thickness from other portions of
  the model. Default neutral_damping_time=10days.  
  </DATA><DATA NAME="nblayer_smooth" TYPE="logical">
  For smoothing the neutral blayer fields. This is useful
  when aiming to produce a smooth quasi-stokes streamfunction 
  within the boundary layers. Default is nblayer_smooth=.true.
  </DATA><DATA NAME="vel_micom_smooth" UNITS="m/sec" TYPE="real">
  Velocity scale that is used for computing the MICOM Laplacian mixing 
  coefficient used in the Laplacian smoothing of neutral blayer fields. 
  </DATA></NAMELIST><USE NAME="            constants_mod"/><USE NAME="         diag_manager_mod"/><USE NAME="                  fms_mod"/><USE NAME="               fms_io_mod"/><USE NAME="          mpp_domains_mod"/><USE NAME="                  mpp_mod"/><USE NAME="         time_manager_mod"/><USE NAME="        ocean_domains_mod"/><USE NAME="  ocean_nphysics_util_mod"/><USE NAME="      ocean_operators_mod"/><USE NAME="     ocean_parameters_mod"/><USE NAME="ocean_sigma_transport_mod"/><USE NAME="    ocean_tracer_util_mod"/><USE NAME="          ocean_types_mod"/><USE NAME="           ocean_util_mod"/><USE NAME="      ocean_workspace_mod"/><SUBROUTINE NAME="ocean_nphysicsB_init" INTERFACE=""><DESCRIPTION>
 Initialize the neutral physics module by registering fields for 
 diagnostic output and performing some numerical checks to see 
 that namelist settings are appropriate. 
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="nphysicsB" INTERFACE=""><DESCRIPTION>
 This function computes the thickness weighted and density weighted
 time tendency for tracer from neutral physics.  Full discussion
 and details are provided by Griffies (2004,2005). 

 Here is a brief summary of the temporal treatment.  

---How the neutral diffusive flux components are computed:

 The vertical flux component is split into diagonal (3,3) and 
 off-diagonal (3,1) and (3,2) terms. The off-diagonal (3,1) and (3,2) 
 terms are included explicitly in time. The main contribution from the 
 (3,3) term to the time tendency is included implicitly in time 
 along with the usual contribution from diapycnal processes 
 (vertical mixing schemes).  This is the K33_implicit term.
 This approach is necessary with high vertical resolution, as 
 noted by Cox (1987).  However, splitting the vertical flux into 
 an implicit and explicit piece compromises the 
 integrity of the vertical flux component (see Griffies et al. 1998).
 So to minimize the disparity engendered by this split, the portion of 
 K33 that can be stably included explicitly in time is computed along 
 with the (3,1) and (3,2) terms. 
 
 All other terms in the mixing tensor are included explicitly in time
 using a forward time step as required for temporal stability of 
 numerical diffusive processes.  

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="neutral_blayer" INTERFACE=""><DESCRIPTION>

 This subroutine computes the "neutral boundary layers" based on
 the formulation of Ferrari and McWilliams (2006). See full
 details and discussion in Elements of MOM4p1 by Griffies (2009).  

 Five vertical regions are identified by Ferrari and McWilliams:
 We simplify these regimes by melding the turbulent and transition 
 regimes into an overall neutral boundary layer regime, within which
 the streamfunction is linearly tapers to zero moving towards the 
 boundary.  We also ignore the bottom regimes, as these are poorly 
 resolved in most models, and the neutral physics fluxes are 
 typically small at the bottom.  
 
 (1) Surface turbulent region:
    Depth ("h" in Ferrari and McWilliams notation) dominated by 
    3d turbulent processes.  This depth is taken from surf_blthick,
    as set by the KPP scheme or another mixed layer scheme.
    A minimum is set as surf_turb_thick_min and is specified 
    as a nml parameter in ocean_nphysicsB_nml. 

    In order to use a low frequency version of the boundary layer
    thickness, we damp its evolution with a damping time scale
    neutral_damping_time (days). 

    In the code, "h_surf"= surf_turb_thick  

 (2) Surface transition region:
    Thickness ("D" in Ferrari and McWilliams notation)
    between the turbulent surface boundary layer and the interior.
    This transition layer thickness is determined by the product of the 
    neutral slope and first baroclinic Rossby radius.  This specification 
    is ad hoc, and more fundamental theories are welcome. 

    In the code, "D_surf"= surf_trans_thick 
    

    Within a "boundary layer" region set by the sum of 
    surf_turb_thick plus surf_trans_thick, the eddy 
    induced velocity is assumed to have zero vertical shear, 
    which means the quasi-Stokes streamfunction is linear with 
    depth.  The neutral diffusive fluxes are reduced to horizontal 
    downgradient diffusion, with "horizontal" defined according
    to surfaces of constant vertical coordinate. 


 (3) Interior region:
    Where neutral diffusion and GM skew-diffusion are taken 
    from their unmodified form. 

  Only use the 31 and 32 triads for this computation since the 
  13 and 23 triads require extra slope calculations, and 
  so will add lots of computational cost. It is felt that the
  31 and 32 triads are sufficient for this calculation, in 
  a similar manner that they are used for the calculation of 
  the non-constant diffusivities.  
 
 Scheme coded for MOM4p1 by Stephen.Griffies
 Version: March2006
 Simplified version: June2008
 
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="fz_terms" INTERFACE=""><DESCRIPTION>
 Subroutine computes the tracer independent pieces of the vertical 
 flux component. As a result of this routine, 
 Array tensor_31 = x-diffusivity*slope (m^2/sec) for fz
 Array tensor_32 = y-diffusivity*slope (m^2/sec) for fz 

 K33 is the (3,3) term in small angle Redi diffusion tensor.
 It is broken into an explicit in time piece and implicit 
 in time piece.  It is weighted by density for non-Boussinesq
 and rho0 for Boussinesq.  

 K33 has units (kg/m^3)*m^2/sec.

 Also will compute the squared Eady growth rate, with the maximum
 slope contributing to this growth rate set by smax.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="fz_terms_diag" INTERFACE=""><DESCRIPTION>
 For saving the contributions from GM and Redi separately, it is 
 necessary to compute the tensor_redi component here. 

 We do so here, reproducing some lines of code from fz_terms,
 to reduce minimize the need to impinge on the case when NOT
 using this generally expensive (memory and computational)
 diagnostic.  

 This routine MUST be called prior to fz_terms, since we use
 tensor_31 and tensor_32 in their raw slope forms here.  

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="fx_flux" INTERFACE=""><DESCRIPTION>
 Subroutine computes the i-directed neutral physics tracer flux component.
 Compute this component for all tracers at level k.

 fx has physical dimensions (area*diffusivity*density*tracer gradient)

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="fx_flux_diag" INTERFACE=""><DESCRIPTION>
 Subroutine computes the i-directed neutral physics tracer flux component
 for Redi separately from GM, in order to diagnose GM and Redi 
 fluxes independent of one another. 

 Compute this component for all tracers at level k.

 fx has physical dimensions (area*diffusivity*density*tracer gradient)

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="fy_flux" INTERFACE=""><DESCRIPTION>
 Subroutine computes the j-directed neutral physics tracer flux component.
 Compute this component for all tracers at level k.

 fy has physical dimensions (area*diffusivity*density*tracer gradient)

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="fy_flux_diag" INTERFACE=""><DESCRIPTION>
 Subroutine computes the j-directed neutral physics tracer flux component
 for Redi separately, in order to diagnose GM and Redi contributions
 independent of one another. 

 Compute this component for all tracers at level k.

 fy has physical dimensions (area*diffusivity*density*tracer gradient)

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="fz_flux" INTERFACE=""><DESCRIPTION>
 Subroutine computes the vertical neutral physics tracer flux component.
 Compute this component for all tracers at level k.
 Surface and bottom boundary condition fz(k=0)=fz(k=kmt(i,j))=0

 fz has physical dimensions (density*diffusivity*tracer gradient)

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="fz_flux_diag" INTERFACE=""><DESCRIPTION>
 For diagnosing the GM and Redi pieces separately. 
 Compute this component for all tracers at level k.
 Surface and bottom boundary condition fz(k=0)=fz(k=kmt(i,j))=0

 fz has physical dimensions (density*diffusivity*tracer gradient)

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="nphysics_diagnostics" INTERFACE=""><DESCRIPTION>
  Send some diagnostics to diagnostics manager. 
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="neutral_chksums" INTERFACE=""><DESCRIPTION>
 Write some checksums.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="ocean_nphysicsB_restart" INTERFACE=""><DESCRIPTION>
  Write out restart files registered through register_restart_file
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="ocean_nphysicsB_end" INTERFACE=""><DESCRIPTION>
 Write to restart.
 </DESCRIPTION></SUBROUTINE></MODULE>
