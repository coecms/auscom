<?xml version="1.0" standalone="no"?>
<!DOCTYPE MODULE SYSTEM 
          "/net2/nnz/opt/tools/xmlDoc/share/xmlDoc/schema/fms.dtd">
<MODULE NAME="ocean_lapcgrid_friction_mod" DATE="2012/06/08 20:15:35" HISTORY="http://cobweb.gfdl.noaa.gov/fms-cgi-bin/viewcvs/FMS/ocean/mom5/ocean_param/lateral"><CONTACT EMAIL="GFDL.Climate.Model.Info@noaa.gov"> S. M. Griffies 
</CONTACT><OVERVIEW>
 This module computes the thickness weighted time tendency for  
 horizontal velocity arising from horizontal Laplacian friction. 
 Friction is formulated for the C-grid here. 
</OVERVIEW><DESCRIPTION>
 This module computes the thickness weighted time tendency for
 horizontal velocity arising from horizontal Laplacian friction. 
 The viscosity used to determine the strength of the tendency 
 can be a general function of space and time as specified by 
 the Smagorinsky approach as well as a grid-scale dependent
 background viscosity.  The form of the friction operator 
 can be isotropic or anisotropic in the horizontal plane. 


 Friction is formulated for the C-grid here. 

</DESCRIPTION><INFO><REFERENCE>
 S.M. Griffies and R.W. Hallberg, 2000: 
 Biharmonic friction with a Smagorinsky viscosity for use in large-scale
 eddy-permitting ocean models
 Monthly Weather Review, vol. 128, pages 2935-2946
 </REFERENCE><REFERENCE>
 R. D. Smith and J. C. McWilliams, 2003:
 Anisotropic horizontal viscosity for ocean models,
 Ocean Modelling, vol. 5, pages 129-156.
 </REFERENCE><REFERENCE>
 Maltrud and Holloway, 2008: Implementing biharmonic neptune in a
 global eddying ocean model, Ocean Modelling, vol. 21, pages 22-34.
 </REFERENCE><REFERENCE>
 Deremble, Hogg, Berloff, and Dewar, 2011:
 On the application of no-slip lateral boundary conditions to coarsely
 resolved ocean models, Ocean Modelling. 
 </REFERENCE><REFERENCE>
 Griffies: Elements of MOM (2012)
 </REFERENCE><NOTE>
 The ocean model can generally run with both Laplacian and biharmonic friction
 enabled at the same time.  Such has been found useful for some eddying 
 ocean simulations. 
 </NOTE></INFO><NAMELIST NAME="ocean_lapcgrid_friction_nml"><DATA NAME="use_this_module" TYPE="logical">
  Must be true to use this module. Default is false.
  </DATA><DATA NAME="debug_this_module" TYPE="logical">
  For debugging by printing checksums.  
  </DATA><DATA NAME="viscosity_scale_by_rossby" TYPE="logical">
  To scale down the laplacian viscosity according to the relative scale of the 
  horizontal grid and the first baroclinic Rossby radius. This is a useful 
  scheme for models that resolve the Rossby radius in the lower latitudes, and so
  presumably do not wish to have much laplacian friction, whereas the higher latitudes
  need more friction.  Default viscosity_scale_by_rossby=.false.
  </DATA><DATA NAME="viscosity_scale_by_rossby_power" TYPE="real">
  The power used to determine the viscosity scaling function. 
  Default viscosity_scale_by_rossby_power=2.0.
  </DATA><DATA NAME="divergence_damp" TYPE="logical">
  To damp the divergence field.  
  </DATA><DATA NAME="divergence_damp_vel_micom" TYPE="real" UNITS="m/s">
  Velocity scale to set the viscosity used with divergence damping. 
  </DATA><DATA NAME="k_smag_iso" UNITS="dimensionless" TYPE="real">
  This is the dimensionless Smagorinsky coefficient used to set the scale 
  of the Smagorinsky isotropic viscosity. 
  </DATA><DATA NAME="k_smag_aniso" UNITS="dimensionless" TYPE="real">
  This is the dimensionless Smagorinsky coefficient used to set the scale 
  of the Smagorinsky anisotropic viscosity. 
  </DATA><DATA NAME="vel_micom_iso" UNITS="m/sec" TYPE="real">
  Velocity scale that is used for computing the MICOM isotropic viscosity. 
  </DATA><DATA NAME="vel_micom_aniso" UNITS="m/sec" TYPE="real">
  Velocity scale that is used for computing the MICOM anisotropic viscosity. 
  </DATA><DATA NAME="equatorial_zonal" TYPE="logical">
  Orient the anisotropic friction within a latitudinal band according to zonal direction. 
  </DATA><DATA NAME="equatorial_zonal_lat" TYPE="real">
  Latitudinal band to use the zonal friction orientation. 
  </DATA><DATA NAME="equatorial_no_smag" TYPE="logical">
  Turn smag off within equatorial_zonal_lat region. 
  </DATA><DATA NAME="eq_vel_micom_iso" TYPE="real">
  Velocity scale that is used for computing the MICOM isotropic viscosity within
  a user specified equatorial band. 
  </DATA><DATA NAME="eq_vel_micom_aniso" TYPE="real">
  Velocity scale that is used for computing the MICOM anisotropic viscosity within
  a user specified equatorial band. 
  </DATA><DATA NAME="eq_lat_micom" TYPE="real">
  Equatorial latitude band (degrees) within which the MICOM viscosity is set according 
  to eq_vel_micom_iso and eq_vel_micom_aniso.
  </DATA><DATA NAME="restrict_polar_visc" TYPE="logical">
  For restricting the background viscosity poleward of a 
  latitude.  This method may be useful for coupling to an ice model
  in which case the horizontal viscosity may need to be a bit 
  smaller to maintain time step constraints.  This is because the 
  effective friction is larger than that just within the ocean.  
  </DATA><DATA NAME="restrict_polar_visc_lat" TYPE="real">
  Latitude poleward of which we restrict the viscosity.
  </DATA><DATA NAME="restrict_polar_visc_ratio" TYPE="real">
  Ratio of the normal critical value that we limit the 
  viscosity to be no greater than.  If restrict_polar_visc_ratio=1.0
  then there is no special limitation of the viscosity beyond that 
  of the one-dimensional stability constraint.  
  </DATA><DATA NAME="neptune" TYPE="logical">
  Set to true for computing friction relative to Neptune barotropic velocity. 
  Default neptune=.false. 
  </DATA><DATA NAME="neptune_length_eq" UNITS="m" TYPE="real">
  Length scale used to compute Neptune velocity at equator.  
  </DATA><DATA NAME="neptune_length_pole" UNITS="m" TYPE="real">
  Length scale used to compute Neptune velocity at pole. 
  </DATA><DATA NAME="neptune_depth_min" UNITS="m" TYPE="real">
  Minimum depth scale used for computing Neptune velocity.
  Default neptune_depth_min=100.0
  </DATA><DATA NAME="neptune_smooth" TYPE="logical">
  For doing a horizontal 1-2-1 smoothing on the diagnosed  
  neptune velocity scale. 
  Default neptune_smooth=.true.
  </DATA><DATA NAME="neptune_smooth_num" TYPE="integer">
  Number of smoothing passes for neptune velocity.
  Default neptune_smooth_num=1.
  </DATA><DATA NAME="use_side_drag_friction" TYPE="logical">
  For converting friction at U-cells next to walls into 
  a drag law, as per Deremble et al. Use cdbot_array
  from ocean_core/ocean_bbc.F90 to compute drag force. 
  Default use_side_drag_friction=.false.
  </DATA><DATA NAME="side_drag_friction_scaling" TYPE="real">
  Dimensionless scaling used for cdbot_array when setting
  side drag friction. So the effective side dragy coefficient
  is side_drag_friction_scaling*cdbot_array.  
  Default side_drag_friction_scaling=1.0.
  </DATA><DATA NAME="side_drag_friction_uvmag_max" UNITS="m/s" TYPE="real">
  Maximum magnitude of horizontal velocity used to compute the 
  side drag friction. This parameter can be useful especially
  for pressure models where the bottom cells can be quite thin 
  and subject to sporadic large magnitudes.  We do the same thing with 
  bottom drag calculations. 
  Default side_drag_friction_uvmag_max=10.0.
  </DATA><DATA NAME="side_drag_friction_max" UNITS="N/m^2" TYPE="real">
  Maximum magnitude of the side drag induced friction. 
  This parameter can be useful especially for pressure models 
  where the bottom cells can be quite thin and subject to sporadic
  large magnitudes.  We do the same thing with bottom drag calculations
  in ocean_bbc. Default side_drag_friction_max=1.0.
  </DATA></NAMELIST><USE NAME="       constants_mod"/><USE NAME="    diag_manager_mod"/><USE NAME="             fms_mod"/><USE NAME="     mpp_domains_mod"/><USE NAME="             mpp_mod"/><USE NAME="   ocean_domains_mod"/><USE NAME="       ocean_obc_mod"/><USE NAME=" ocean_operators_mod"/><USE NAME="ocean_parameters_mod"/><USE NAME="     ocean_types_mod"/><USE NAME="      ocean_util_mod"/><USE NAME=" ocean_workspace_mod"/><SUBROUTINE NAME="ocean_lapcgrid_friction_init" INTERFACE=""><DESCRIPTION>
 Initialize the horizontal Laplacian friction module by 
 registering fields for diagnostic output and performing some 
 numerical checks to see that viscosity is set appropriately.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="lapcgrid_friction" INTERFACE=""><DESCRIPTION>
 This routine computes thickness weighted and density weighted 
 time tendency for horizontal velocity arising from horizontal 
 Laplacian friction.  

 The algorithm is derived from a functional approach that ensures
 kinetic energy is consistenty dissipated for all flow configurations. 
 The stencil is far simpler than the B-grid approach. In particular, 
 there are no triads here for the C-grid.  
 
 Fundamental to the scheme are the rates of horizontal deformation 
 horizontal tension = DT = (dy)(u/dy)_x - (dx)(v/dx)_y             
 horizontal strain  = DS = (dx)(u/dx)_y + (dy)(v/dy)_x             
 Units of the tension and strain are sec^-1.

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="lapcgrid_viscosity_check" INTERFACE=""><DESCRIPTION>
 Subroutine to perform linear stability check for the Laplacian 
 operator given a value for the horizontal biharmonic viscosity.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="lapcgrid_reynolds_check" INTERFACE=""><DESCRIPTION>
 Subroutine to compute the LLaplacian grid Reynolds number.  Large 
 Reynolds numbers indicate regions where solution may experience 
 some grid noise due to lack of enough horizontal friction. 
 </DESCRIPTION><IN NAME="u" TYPE="real" DIM="(isd:ied,jsd:jed,nk,2)">
 Horizontal velocity field at time tau
 </IN></SUBROUTINE><SUBROUTINE NAME="compute_neptune_velocity" INTERFACE=""><DESCRIPTION>
 Compute Neptune velocity for c-grid.  

 Method follows that used in MOM2 and MOM3 as implemented by 
 Greg Holloway (zounds@ios.bc.ca) and Michael Eby (eby@uvic.ca) 
 Coded in mom4 by Stephen.Griffies 

 Neptune is calculated as an equilibrium streamfunction given by 
 pnep = -f*snep*snep*ht and is applied through friction whereby 
 the solution is damped towards the equilibrium streamfunction 
 rather than being damped towards zero kinetic energy. 

 hu    = depth of B-grid velocity corner 
 snep = spnep + (senep-spnep)*(0.5 + 0.5*cos(2.0*latitude))

 Neptune length scale snep has a value of senep at the
 equator and smoothly changes to spnep at the poles

 Reference:
 Holloway, G., 1992: Representing topographic stress for large
 scale ocean models, J. Phys. Oceanogr., 22, 1033-1046

 Eby and Holloway, 1994: Sensitivity of a large scale ocean model
 to a parameterization of topographic stress.  JPO, vol. 24,
 pages 2577-2588

 March 2012
 Stephen.Griffies 
 Algorithm updated to Eby and Holloway (1994)

 May 2012
 Stephen.Griffies 
 upgraded to Cgrid 

 </DESCRIPTION></SUBROUTINE></MODULE>
