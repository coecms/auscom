<?xml version="1.0" standalone="no"?>
<!DOCTYPE MODULE SYSTEM 
          "/net2/nnz/opt/tools/xmlDoc/share/xmlDoc/schema/fms.dtd">
<MODULE NAME="ocean_vert_kpp_mom4p0_mod" DATE="2012/06/03 00:41:57" HISTORY="http://cobweb.gfdl.noaa.gov/fms-cgi-bin/viewcvs/FMS/ocean/mom5/ocean_param/vertical"><CONTACT EMAIL="GFDL.Climate.Model.Info@noaa.gov"> A. Rosati
</CONTACT><REVIEWER EMAIL="wily@ucar.edu"> Bill Large 
</REVIEWER><REVIEWER EMAIL="GFDL.Climate.Model.Info@noaa.gov"> Stephen Griffies 
</REVIEWER><REVIEWER EMAIL="GFDL.Climate.Model.Info@noaa.gov"> M.J. Harrison 
</REVIEWER><REVIEWER EMAIL="GFDL.Climate.Model.Info@noaa.gov">  Hyun-Chul Lee 
</REVIEWER><OVERVIEW>
 Vertical viscosity and diffusivity according KPP using 
 code from MOM4p0, which is hard-wired for full cell 
 GEOPOTENTIAL vertical coordinate model. It remains part of 
 MOM for legacy purposes.  
</OVERVIEW><DESCRIPTION>
 This module computes vertical viscosity and diffusivity according to 
 the K-profile parameterization scheme of Large, McWilliams, and 
 Doney (1994). It computes both local and non-local mixing.

 This module contains code that is hard-wired for GEOPOTENTIAL coordinates, 
 and so is NOT generally recommended.  It remains part of MOM for 
 legacy purposes. 

 This version of KPP has been implemented only for the Bgrid.

 This module also adds mixing due to barotropic tide drag 
 (coastal_tide_mix) and baroclinic tides (int_tide_mix). 
 The barotropic (coastal_tides) and baroclinic (int_tides) mixing 
 schemes are directly analogous to those available in the 
 module ocean_vert_tidal.F90.  However, some of the averaging and 
 smoothing operations differ, and so detailed comparisons will show
 differences. We retain the code here, in KPP, for legacy purposes. 
</DESCRIPTION><INFO><REFERENCE>
 W.G. Large and J.C. McWilliams and S.C. Doney
 Oceanic vertical mixing: A review and a model with
 a nonlocal boundary layer parameterization
 Reviews of Geophysics (1994) vol 32 pages 363-403
 </REFERENCE><REFERENCE>
 Hyun-Chul Lee, A. Rosati, and M.J. Spelman
 Barotropic tidal mixing impact in a coupled climate model:
 ocean condition and meridional overturning circulation 
 in the northern Atlantic
 Ocean Modelling, vol 11, pages 464--477
 </REFERENCE><NOTE>
 Original numerical algorithm by Bill Large at NCAR June 6, 1994
 </NOTE><NOTE>
 Equation numbers in the code refer to the Large etal paper. 
 </NOTE><NOTE>
 Surface fresh water contributes to surface buoyancy via conversion to 
 a locally implied salt flux. 
 </NOTE></INFO><NAMELIST NAME="ocean_vert_kpp_mom4p0_nml"><DATA NAME="use_this_module" TYPE="logical">
  Logical switch to enable kpp diffusion.  Default is false. 
  </DATA><DATA NAME="shear_instability" TYPE="logical">
  logical switch for shear instability mixing.
  Default shear_instability=.true.
  </DATA><DATA NAME="double_diffusion" TYPE="logical">
  Logical switch for double-diffusive mixing.
  Default double_diffusion=.true.  
  </DATA><DATA NAME="diff_cbt_iw" UNITS="m^2/sec" TYPE="real">
  Background vertical diffusivity.  Note that if using Bryan-Lewis as a 
  background diffusivity, then should set diff_cbt_iw=0.0. 
  </DATA><DATA NAME="visc_cbu_iw" UNITS="m^2/sec" TYPE="real">
  Background vertical viscosity
  </DATA><DATA NAME="visc_cbu_limit" UNITS="m^2/sec" TYPE="real">
  Enhanced vertical viscosity due to shear instability 
  </DATA><DATA NAME="diff_cbt_limit" UNITS="m^2/sec" TYPE="real">
  Enhanced vertical diffusivity due to shear instability 
  </DATA><DATA NAME="visc_con_limit" UNITS="m^2/sec" TYPE="real">
  Enhanced vertical viscosity in regions of convection
  </DATA><DATA NAME="diff_con_limit" UNITS="m^2/sec" TYPE="real">
  Enhanced vertical diffusivity in regions of convection
  </DATA><DATA NAME="concv" UNITS="dimensionless" TYPE="real">
  constant for pure convection (eqn. 23 of Large etal)
  </DATA><DATA NAME="Ricr" UNITS="dimensionless" TYPE="real">
  Critical bulk Richardson number.  Default from NCAR is 
  0.3, though this number has a large uncertainty and some
  find that 1.0 can be of use. 
  </DATA><DATA NAME="non_local_kpp" TYPE="logical">
  logical switch for enabling the non-local mixing aspect of kpp. 
  Default is .true. as this is what the original KPP scheme suggests. 
  </DATA><DATA NAME="smooth_blmc" TYPE="logical">
  Smooth boundary layer diffusitivies to remove grid scale noise.
  Such noise is apparent in the diagnosed mixed layer depth as well
  as the SST, especially when running coupled models where forcing 
  has high temporal frequency. 
  </DATA><DATA NAME="coastal_tidal_mix" TYPE="logical">
  For adding an extra vertical shear associated with tidal mixing.
  This method has found to be of use for mixing near shelves.  
  </DATA><DATA NAME="p_tide" TYPE="real">
  The p constant in the Munk-Anderson scheme
  Default p_tide=-0.25
 </DATA><DATA NAME="sigma_tide" TYPE="real">
  The sigma constant in the Munk-Anderson scheme
  Default sigma_tide=3.0
 </DATA><DATA NAME="int_tidal_mix" TYPE="logical">
  For adding an internal tidal mixing over rough topography.
  This method has found to be of use for mixing in the rough topography in open ocean.  
  Default int_tidal_mix=.false.
  </DATA><DATA NAME="int_tide_zeta1" TYPE="real" UNITS="metre">
  Shallow depth for computation of internal tide.
  Default int_tide_zeta1=300.0
 </DATA><DATA NAME="int_tide_zeta2" TYPE="real" UNITS="metre">
  Deeper depth for computation of internal tide.
  Default int_tide_zeta2=1800.0
 </DATA><DATA NAME="int_tide_min_depth" TYPE="real" UNITS="metre">
  Minimum depth for internal tide mixing to be computed. 
  Default int_tide_min_depth=100.0
 </DATA><DATA NAME="int_tide_q" TYPE="real" UNITS="dimensionless">
  Fraction of internal tide energy locally dissipated. 
  Default int_tide_q=.33333
 </DATA><DATA NAME="int_tide_gamma" TYPE="real" UNITS="dimensionless">
  Dimensionless efficiency for converting energy dissipation to diffusivity.
  Default int_tide_gamma=0.2
 </DATA><DATA NAME="wsfc_combine_runoff_calve" TYPE="logical">
  For computing wsfc as in the mom4p0d code, where we combine
  the runoff+calving into a single field called river.  
  The alternative keeps the fields separate, as would be appropriate
  for a land model that separately tracks the tracer content in the 
  calving and runoff. 
  Default wsfc_combine_runoff_calve=.true., as this will recover
  the previous behaviour, to the bit. 
  </DATA></NAMELIST><USE NAME="        constants_mod"/><USE NAME="     diag_manager_mod"/><USE NAME="              fms_mod"/><USE NAME="      mpp_domains_mod"/><USE NAME="              mpp_mod"/><USE NAME="    ocean_density_mod"/><USE NAME="    ocean_domains_mod"/><USE NAME=" ocean_parameters_mod"/><USE NAME="ocean_tracer_util_mod"/><USE NAME="      ocean_types_mod"/><USE NAME="  ocean_workspace_mod"/><SUBROUTINE NAME="ocean_vert_kpp_mom4p0_init" INTERFACE=""><DESCRIPTION>
 Initialization for the KPP vertical mixing scheme

     input:
       dzt    = thickness of vertical levels (m)                         <BR/>
       km     = number of vertical levels                                <BR/> 
       yt     = latitude of grid points (deg)                            <BR/> 
       jmt    = number of latitudes                                      <BR/>  
       dtxcel = time step accelerator as a function of level             <BR/>    
       dtimet = forward time step for tracer diffusion (sec)             <BR/>   
       dtimeu = forward time step for velcotiy friction (sec)            <BR/>   
       error  = logical to signal problems                               <BR/>
       cifdef = array of character strings for listing enabled "ifdefs"  <BR/>
       ifdmax = size of "cifdef"                                         <BR/> 
       nifdef = current number of enabled "ifdefs"                       <BR/>   
       vmixset= logical to determine if a vertical mixing scheme was     <BR/> 
                chosen

     output:
       shear_instability = logical switch for shear instability mixing   <BR/>   
       double_diffusion = logical switch for double-diffusive mixing     <BR/>
       visc_cbu_limit = visc max due to shear instability  (m**2/sec)    <BR/>
       diff_cbt_limit = diffusivity ..                     (m**2/sec)    <BR/>
       visc_cbu_iw  = visc background due to internal waves(m**2/sec)    <BR/>
       diff_cbt_iw  = diffusivity ..                       (m**2/sec)    <BR/> 
       visc_con_limit = visc due to convective instability (m**2/sec)    <BR/>
       diff_con_limit = diffusivity ..                     (m**2/sec)    <BR/>
       Vtc = non-dimensional constant used in calc. bulk Ri              <BR/>
       cg  = constant used in calc.nonlocal transport term               <BR/>  
       wmt = turbulent velocity scale for momentum                       <BR/>  
       wst = turbulent velocity scale for scaler                         <BR/> 
       error  = true if some inconsistancy was found                    

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="vert_mix_kpp_mom4p0" INTERFACE=""><DESCRIPTION>
 This subroutine computes the vertical diffusivity and viscosity according
 to the KPP scheme of Large etal.  In brief, the scheme does the 
 following:

 --Compute interior mixing everywhere:                               
   interior mixing gets computed at all cell interfaces due to constant
   internal wave background activity ("visc_cbu_iw" and "diff_cbt_iw").
   Mixing is enhanced in places of static instability (local Ri &lt; 0).
   Additionally, mixing can be enhanced by contribution from shear 
   instability which is a function of the local Ri.

 --Double diffusion:
   Interior mixing can be enhanced by double diffusion due to salt
   fingering and diffusive convection ("double_diffusion=.true.").

 --Boundary layer:

   (A) Boundary layer depth:
       at every gridpoint the depth of the oceanic boundary layer 
       ("hbl") gets computed by evaluating bulk richardson numbers.

   (B) Boundary layer mixing:
       within the boundary layer, above hbl, vertical mixing is 
       determined by turbulent surface fluxes, and interior mixing at
       the lower boundary, i.e. at hbl.

 NOTE: Use smf_bgrid since this uses the primary smf array read in from 
 the coupler in ocean_core/ocean_sbc.F90 when using the FMS coupler.

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="bldepth" INTERFACE=""><DESCRIPTION>
 The oceanic planetray boundary layer depth, hbl, is determined as
 the shallowest depth where the bulk richardson number is
 equal to the critical value, Ricr.

 Bulk Richardson numbers are evaluated by computing velocity and
 buoyancy differences between values at zt(kl) and surface
 reference values.

 In this configuration, the reference values are equal to the
 values in the surface layer.  
 When using a very fine vertical grid, these values should be 
 computed as the vertical average of velocity and buoyancy from 
 the surface down to epsilon*zt(kl).

 When the bulk richardson number at k exceeds Ricr, hbl is
 linearly interpolated between grid levels zt(k) and zt(k-1).

 The water column and the surface forcing are diagnosed for 
 stable/ustable forcing conditions, and where hbl is relative 
 to grid points (caseA), so that conditional branches can be 
 avoided in later subroutines.

  model  
      real zt(1:nk)              = vertical grid (m)                           <BR/>
      real dzt(1:nk)             = layer thicknesses (m)                       <BR/>  

  input
      real dbloc(ij_bounds,nk)   = local delta buoyancy         (m/s^2)        <BR/> 
      real dbsfc(ij_bounds,nk)   = delta buoyancy w/ respect to sfc(m/s)^2     <BR/> 
      real ustar(ij_bounds)      = surface friction velocity     (m/s)         <BR/>   
      real Bo(ij_bounds)         = surface turbulent buoyancy forcing(m^2/s^3) <BR/> 
      real Bosol(ij_bounds)      = radiative buoyancy forcing (m^2/s^3)        <BR/>  
      real f(ij_bounds)          = Coriolis parameter            (1/s)         <BR/>
      integer jwtype(ij_bounds)  = Jerlov water type           (1 to 5)        <BR/>   

  output
      real hbl(ij_bounds)        ! boundary layer depth              (m)       <BR/>  
      real bfsfc(ij_bounds) !Bo+radiation absorbed to d=hbf*hbl(m^2/s^3)       <BR/> 
      real stable(ij_bounds)     ! =1 in stable forcing; =0 unstable           <BR/> 
      real caseA(ij_bounds)      ! =1 in case A, =0 in case B                  <BR/> 
      integer kbl(ij_bounds)     ! index of first grid level below hbl         <BR/>
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="wscale" INTERFACE=""><DESCRIPTION>
 Compute turbulent velocity scales.
 Use a 2D-lookup table for wm and ws as functions of ustar and
 zetahat (=vonk*sigma*hbl*bfsfc).

 Note: the lookup table is only used for unstable conditions
 (zehat &lt;= 0), in the stable domain wm (=ws) gets computed
 directly.

  model

  input                                                               <BR/>
      real sigma(ij_bounds)  = normalized depth (d/hbl)               <BR/>
      real hbl(ij_bounds)    = boundary layer depth (m)               <BR/>  
      real ustar(ij_bounds)  = surface friction velocity    (m/s)     <BR/>  
      real bfsfc(ij_bounds)  = total surface buoyancy flux (m^2/s^3)  <BR/>
  output                                                               <BR/>  
      real wm(ij_bounds),ws(ij_bounds) ! turbulent velocity scales at sigma
 local                                                                 <BR/>  
      real zehat           ! = zeta *  ustar**3

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="ri_iwmix" INTERFACE=""><DESCRIPTION>
 Compute interior viscosity and diffusivity due 
 to shear instability (dependent on a local richardson number),
 to background internal wave activity, and 
 to static instability (local richardson number &lt; 0).

     inputs:

      nk             = number of vertical levels                               <BR/>
      visc_cbu_iw    = background "visc_cbu" (m**2/sec) due to internal waves  <BR/>
      diff_cbt_iw    = background "diff_cbt" (m**2/sec) due to internal waves  <BR/>
      visc_cbu_limit = largest "visc_cbu" in regions of gravitational          <BR/>
                       instability (m**2/sec)                                  <BR/>
      diff_cbt_limit = largest "diff_cbt" in regions of gravitational          <BR/>
                       instability (m**2/sec)                       

     outputs:

      visc_cbu = viscosity coefficient at bottom of "u" cells (m**2/s)         <BR/>   
      diff_cbt = diffusion coefficient at bottom of "t" cells (m**2/s)         <BR/>  
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="ddmix" INTERFACE=""><DESCRIPTION>
 Rrho dependent interior flux parameterization.
 Add double-diffusion diffusivities to Ri-mix values at blending
 interface and below. salt fingering code modified july 2003
 by stephen.griffies based on NCAR CCSM2.x

     inputs: 

      nk     = number of vertical levels                                 <BR/>
      real talpha(imt,km,jmw)   ! d(rho)/ d(pot.temperature) (kg/m^3/C)  <BR/> 
      real sbeta(imt,km,jmw)    ! d(rho)/ d(salinity)     (kg/m^3/PSU)  

     outputs:

      diff_cbt = diffusion coefficient at bottom of "t" cells (m**2/s)


 local

      real alphaDT(imt,km,jmw)   ! alpha * DT  across interfaces          <BR/>   
      real betaDS(imt,km,jmw)    ! beta  * DS  across interfaces          <BR/>  

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="blmix_kpp" INTERFACE=""><DESCRIPTION>
 Mixing coefficients within boundary layer depend on surface
 forcing and the magnitude and gradient of interior mixing below
 the boundary layer ("matching").

 CAUTION: if mixing bottoms out at hbl = zt(nk) then
 fictitious layer at nk+1 is needed with small but finite width 
 dzt(nk+1) (eg. epsln = 1.e-20).  

     inputs:

      real ustar(ij_bounds)    ! surface friction velocity         (m/s)  <BR/>
      real bfsfc(ij_bounds)    ! surface buoyancy forcing     (m^2/s^3)   <BR/>
      real hbl(ij_bounds)      ! boundary layer depth              (m)    <BR/>
      real stable(ij_bounds)   ! = 1 in stable forcing                    <BR/>
      real caseA(ij_bounds)    ! = 1 in case A                            <BR/>
      integer kbl(ij_bounds)   ! index of first grid level below hbl

     outputs:

      visc_cbu = viscosity coefficient at bottom of "u" cells (m**2/s)    <BR/>     
      diff_cbt = diffusion coefficient at bottom of "t" cells (m**2/s)    <BR/>

      real dkm1(ij_bounds,3)    = boundary layer diff_cbt at kbl-1 level  <BR/> 
      real blmc(ij_bounds,nk,3) = boundary layer mixing coeff.(m**2/s)    <BR/> 
      real ghats(ij_bounds,nk)  = nonlocal scalar transport               <BR/> 

    local:

      real gat1(ij_bounds,3)                                               <BR/>    
      real dat1(ij_bounds,3)                                               <BR/> 
      real sigma(ij_bounds)              = normalized depth (d / hbl)      <BR/> 
      real ws(ij_bounds), wm(ij_bounds)  = turbulent velocity scales (m/s) 

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="enhance" INTERFACE=""><DESCRIPTION>
 Enhance the diffusivity at the kbl-.5 interface

 input
      integer kbl(ij_bounds)   =  grid above hbl                      <BR/>
      real hbl(ij_bounds)      =  boundary layer depth (m)            <BR/>
      real dkm1(ij_bounds,3)   =  bl diffusivity at kbl-1 grid level  <BR/>
      real caseA(ij_bounds)    =  1 in caseA, = 0 in case B

 input/output
      real ghats(ij_bounds,nk)  =  nonlocal transport     (s/m**2)     <BR/>
      modified ghats at kbl(i)-1 interface        
 output
      real blmc(ij_bounds,nk,3) = enhanced boundary layer mixing coefficient

 local
  real delta                    =  fraction hbl lies beteen zt neighbors

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="ri_for_kpp" INTERFACE=""><DESCRIPTION>
 Compute Richardson number on tracer and velocity cell bottoms. 
  rit = richardson number at bottom of T cells <BR/>
  riu = richardson number at bottom of U cells
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="watermass_diag_init" INTERFACE=""><DESCRIPTION>
 Initialization of watermass diagnostic output files. 
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="watermass_diag" INTERFACE=""><DESCRIPTION>
 Diagnose effects from KPP nonlocal on the watermass transformation.
 </DESCRIPTION></SUBROUTINE></MODULE>
