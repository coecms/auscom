<?xml version="1.0" standalone="no"?>
<!DOCTYPE MODULE SYSTEM 
          "/net2/nnz/opt/tools/xmlDoc/share/xmlDoc/schema/fms.dtd">
<MODULE NAME="ocean_vert_kpp_mom4p1_mod" DATE="2012/06/17 12:31:36" HISTORY="http://cobweb.gfdl.noaa.gov/fms-cgi-bin/viewcvs/FMS/ocean/mom5/ocean_param/vertical"><CONTACT EMAIL="GFDL.Climate.Model.Info@noaa.gov"> A. Rosati
</CONTACT><CONTACT EMAIL="martin.schmidt@io-warnemuende.de"> Martin Schmidt 
</CONTACT><REVIEWER EMAIL="wily@ucar.edu"> Bill Large 
</REVIEWER><REVIEWER EMAIL="GFDL.Climate.Model.Info@noaa.gov"> Stephen Griffies 
</REVIEWER><REVIEWER EMAIL="GFDL.Climate.Model.Info@noaa.gov"> M.J. Harrison 
</REVIEWER><REVIEWER EMAIL="GFDL.Climate.Model.Info@noaa.gov">  Hyun-Chul Lee 
</REVIEWER><OVERVIEW>
 Vertical viscosity and diffusivity according KPP.  
 This module has extra code options to handle regions of extremely fresh water.  
 This particular version of the KPP module is frozen based on its use in MOM4p1
 at GFDL for the IPCC AR5 climate model ESM2M. 
</OVERVIEW><DESCRIPTION>
 This module computes vertical viscosity and diffusivity according to 
 the K-profile parameterization scheme of Large, McWilliams, and 
 Doney (1994). It computes both local and non-local mixing.
 The code has been updated to MOM4p1, so that vertical grid increments
 are suitable for generalized vertical coordinate models.  When run
 as geopotential model, there will be some differences, since the
 MOM4.0 code (available in ocean_vert_kpp_mom4p0.F90) incorrectly
 ignored the free surface undulations affecting the top model grid
 cell thickness.  

 This version of KPP has been implemented only for the Bgrid. 
</DESCRIPTION><INFO><REFERENCE>
 W.G. Large and J.C. McWilliams and S.C. Doney
 Oceanic vertical mixing: A review and a model with
 a nonlocal boundary layer parameterization
 Reviews of Geophysics (1994) vol 32 pages 363-403
 </REFERENCE><REFERENCE>
 Danabasoglu etal (2006) 
 Diurnal coupling in the tropical oceans of CCSM3
 Journal of Climate (2006) vol 19 pages 2347--2365
 </REFERENCE><NOTE>
 Original numerical algorithm by Bill Large at NCAR June 6, 1994
 </NOTE><NOTE>
 Equation numbers in the code refer to the Large etal paper. 
 </NOTE><NOTE>
 Surface fresh water contributes to surface buoyancy via conversion to 
 a locally implied salt flux. 
 </NOTE></INFO><NAMELIST NAME="ocean_vert_kpp_mom4p1_nml"><DATA NAME="use_this_module" TYPE="logical">
  Logical switch to enable kpp diffusion.  Default is false. 
  </DATA><DATA NAME="debug_this_module" TYPE="logical">
  Logical switch for debugging. Default debug_this_module=.false. 
  </DATA><DATA NAME="shear_instability" TYPE="logical">
  logical switch for shear instability mixing.
  Default shear_instability=.true.
  </DATA><DATA NAME="double_diffusion" TYPE="logical">
  Logical switch for double-diffusive mixing.
  Default double_diffusion=.true.  
  </DATA><DATA NAME="diff_cbt_iw" UNITS="m^2/sec" TYPE="real">
  Background vertical diffusivity.  Note that if using Bryan-Lewis as a 
  background diffusivity, then should set diff_cbt_iw=0.0. 
  </DATA><DATA NAME="visc_cbu_iw" UNITS="m^2/sec" TYPE="real">
  Background vertical viscosity
  </DATA><DATA NAME="visc_cbu_limit" UNITS="m^2/sec" TYPE="real">
  Enhanced vertical viscosity due to shear instability 
  </DATA><DATA NAME="diff_cbt_limit" UNITS="m^2/sec" TYPE="real">
  Enhanced vertical diffusivity due to shear instability 
  </DATA><DATA NAME="visc_con_limit" UNITS="m^2/sec" TYPE="real">
  Enhanced vertical viscosity in regions of convection
  </DATA><DATA NAME="diff_con_limit" UNITS="m^2/sec" TYPE="real">
  Enhanced vertical diffusivity in regions of convection
  </DATA><DATA NAME="concv" UNITS="dimensionless" TYPE="real">
  constant for pure convection (eqn. 23 of Large etal)
  </DATA><DATA NAME="Ricr" UNITS="dimensionless" TYPE="real">
  Critical bulk Richardson number.  Default from NCAR is 
  0.3, though this number has a large uncertainty and some
  find that 1.0 can be of use. 
  </DATA><DATA NAME="non_local_kpp" TYPE="logical">
  logical switch for enabling the non-local mixing aspect of kpp. 
  Default is .true. as this is what the original KPP scheme suggests. 
  </DATA><DATA NAME="smooth_blmc" TYPE="logical">
  Smooth boundary layer diffusitivies to remove grid scale noise.
  Such noise is apparent in the diagnosed mixed layer depth as well
  as the SST, especially when running coupled models where forcing 
  has high temporal frequency. 
  Default smooth_blmc=.false.

  Warning: This smoother can cause some problems with ghat in regions
  of zero surface forcing.  To understand details, one needs 
  the paper of Large et al. Vertical diffusion has the general form 
  &lt;wx&gt; = K(x_z - ghats)
  In the surface layer a vertical scale function ws is estimated.
  We have K ~ ws and ghats ~1/ws. If wind stress is zero the vertical 
  scale ws becomes zero too. Hence, ghats is very large 
  (something finite, since it is divided by ws+epsln). Now it may happen,
  that the bouyancy flux becomes negative (~ -10-30). This enables
  the nonlocal scheme. Because the mixing coefficient in the 
  surface boundary layer scales with ws the corresponding
  time tendency should be of the order (1/ws * ws = finite). However,
  if smooth_blmc is enabled, it may happen, that from neighbouring
  points with different mixing depth a finite value for
  the mixing coefficient leaks in. In this case
  the tracer time tendency from the nonlocal scheme becomes huge
  and the model fails. 

  The smoother destroys the consistency between ghats and diff_cbt.
  In most cases this should not matter, but the example shows,
  that sudden model failure is possible under otherwise
  stable and smooth conditions.
 
  </DATA><DATA NAME="kl_min" TYPE="integer">
  Lower loop index for finding new kbl. Needed for use with certain 
  tests of OBC, where kl_min=1 needed, whereas default in original 
  implementation has kl_min=2.  Default in MOM is kl_min=2. 
  </DATA><DATA NAME="kbl_standard_method" TYPE="logical">
  For computing kbl as in the MOM4p0d code, which is taken from 
  the original NCAR scheme.  If false, then will slightly modify 
  the logic.  The modified logic has been found necessary when running
  with as few as two grid cells in the vertical.  
  Default kbl_standard_method=.true.
  </DATA><DATA NAME="limit_with_hekman" TYPE="logical">
  Limiting the boundary layer depth with the Ekman depth may result in a 
  shallow boundary layer. In this case the internal values of the vertical 
  mixing and viscosity coefficients may be large. This results in 
  unrealistically large non-local vertical mixing
  Default limit_with_hekman=.true.
  </DATA><DATA NAME="limit_ghats" TYPE="logical">
  Limits the non-local vertical tracer flux to the value of the tracer 
  surface flux.   
  Default limit_ghats=.false.
  </DATA><DATA NAME="hbl_with_rit" TYPE="logical">
  The default method for determination of the boundary layer depth may fail
  if the water column is instable (negative Richardson number) below or above 
  the layer that contains the diagnosed hbl.  
  With hbl_with_rit=.true. the search for the boundary layer depth is continued 
  downward in this case even if the bulk Richardson number exceeds the 
  critical value. This removes a lot of noise from the boundary layer depth. 
  Default hbl_with_rit=.false.
  </DATA><DATA NAME="radiation_large" TYPE="logical">
  Remove the shortwave radiation leaving the boundary layer to the ocean interior 
  (hence, not absorbed in the boundary layer) from non-local vertical heat flux
  Default radiation_large=.false.
  </DATA><DATA NAME="radiation_zero" TYPE="logical">
  Remove the all shortwave radiation from non-local vertical heat flux.
  Default radiation_zero=.false.
  </DATA><DATA NAME="radiation_iow" TYPE="logical">
  Keep only the shortwave radiation absorbed between the surface and a certain level
  in non-local vertical heat flux through this level.
  Default radiation_iow=.false.
  </DATA><DATA NAME="bvf_from_below" TYPE="logical">
  Use BV-freq. at the cell bottom instead of the cell top
  as in Danabasoglu et al. (2006).
  Default bvf_from_below=.false., as this will recover 
  older behaviour.  
  </DATA><DATA NAME="variable_vtc" TYPE="logical">
  Make vtc dependent on BV-freq. as in Danabasoglu et al. (2006).
  Default variable_vtc=.false., as this will recover 
  older behaviour.  
  </DATA><DATA NAME="use_max_shear" TYPE="logical">
  Use maximum shear instead of 4-point average 
  (as in Danabasoglu et al. (2006)).
  Default use_max_shear=.false., as this will recover 
  older behaviour.  
  </DATA><DATA NAME="linear_hbl" TYPE="logical">
  Use linear interpolation to find the position of hbl.
  If set to false, then use the quadratic interpolation 
  as in Danabasoglu et al. (2006). The quadratic approach
  generally yields a slightly deeper surface boundary layer.
  Default linear_hbl=.true., as this will recover 
  older behaviour.  
  </DATA><DATA NAME="wsfc_combine_runoff_calve" TYPE="logical">
  For computing wsfc as in the MOM4p0d code, where we combine
  the runoff+calving into a single field called river.  
  The alternative keeps the fields separate, as would be appropriate
  for a land model that separately tracks the tracer content in the 
  calving and runoff. 
  Default wsfc_combine_runoff_calve=.true., as this will recover
  the previous behaviour, to the bit. 
  </DATA><DATA NAME="smooth_ri_kmax_eq_kmu" TYPE="logical">
  When smoothing the Richardson number, we do so over a vertical 
  column with max k-levels set by either kmt or kmu.  The proper 
  approach is kmu, since we are smoothing riu.  But for backwards
  compatibility, we default to smooth_ri_kmax_eq_kmu=.false. 
  </DATA></NAMELIST><USE NAME="        constants_mod"/><USE NAME="     diag_manager_mod"/><USE NAME="              fms_mod"/><USE NAME="      mpp_domains_mod"/><USE NAME="              mpp_mod"/><USE NAME="    ocean_density_mod"/><USE NAME="    ocean_domains_mod"/><USE NAME=" ocean_parameters_mod"/><USE NAME="ocean_tracer_util_mod"/><USE NAME="      ocean_types_mod"/><USE NAME="  ocean_workspace_mod"/><SUBROUTINE NAME="ocean_vert_kpp_mom4p1_init" INTERFACE=""><DESCRIPTION>
 Initialization for the KPP vertical mixing scheme
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="vert_mix_kpp_mom4p1" INTERFACE=""><DESCRIPTION>
 This subroutine computes the vertical diffusivity and viscosity according
 to the KPP scheme of Large etal.  In brief, the scheme does the 
 following:

 --Compute interior mixing everywhere:                               
   interior mixing gets computed at all cell interfaces due to constant
   internal wave background activity ("visc_cbu_iw" and "diff_cbt_iw").
   Mixing is enhanced in places of static instability (local Ri &lt; 0).
   Additionally, mixing can be enhanced by contribution from shear 
   instability which is a function of the local Ri.

 --Double diffusion:
   Interior mixing can be enhanced by double diffusion due to salt
   fingering and diffusive convection ("double_diffusion=.true.").

 --Boundary layer:

   (A) Boundary layer depth:
       at every gridpoint the depth of the oceanic boundary layer 
       ("hbl") gets computed by evaluating bulk richardson numbers.

   (B) Boundary layer mixing:
       within the boundary layer, above hbl, vertical mixing is 
       determined by turbulent surface fluxes, and interior mixing at
       the lower boundary, i.e. at hbl.

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="bldepth" INTERFACE=""><DESCRIPTION>
 The oceanic planetray boundary layer depth, hbl, is determined as
 the shallowest depth where the bulk richardson number is
 equal to the critical value, Ricr.

 Bulk Richardson numbers are evaluated by computing velocity and
 buoyancy differences between values at zt(kl) and surface
 reference values.

 In this configuration, the reference values are equal to the
 values in the surface layer.  
 When using a very fine vertical grid, these values should be 
 computed as the vertical average of velocity and buoyancy from 
 the surface down to epsilon*zt(kl).

 When the bulk richardson number at k exceeds Ricr, hbl is
 linearly interpolated between grid levels zt(k) and zt(k-1).

 The water column and the surface forcing are diagnosed for 
 stable/ustable forcing conditions, and where hbl is relative 
 to grid points (caseA), so that conditional branches can be 
 avoided in later subroutines.

  model  
      real zt(1:nk)              = vertical grid (m)                           <BR/>
      real dzt(1:nk)             = layer thicknesses (m)                       <BR/>  

  input
      real dbloc(ij_bounds,nk)   = local delta buoyancy         (m/s^2)        <BR/> 
      real dbsfc(ij_bounds,nk)   = delta buoyancy w/ respect to sfc(m/s)^2     <BR/> 
      real ustar(ij_bounds)      = surface friction velocity     (m/s)         <BR/>   
      real Bo(ij_bounds)         = surface turbulent buoyancy forcing(m^2/s^3) <BR/> 
      real Bosol(ij_bounds)      = radiative buoyancy forcing (m^2/s^3)        <BR/>  
      real f(ij_bounds)          = Coriolis parameter            (1/s)         <BR/>
      integer jwtype(ij_bounds)  = Jerlov water type           (1 to 5)        <BR/>   

  output
      real hbl(ij_bounds)        ! boundary layer depth              (m)       <BR/>  
      real bfsfc(ij_bounds) !Bo+radiation absorbed to d=hbf*hbl(m^2/s^3)       <BR/> 
      real stable(ij_bounds)     ! =1 in stable forcing; =0 unstable           <BR/> 
      real caseA(ij_bounds)      ! =1 in case A, =0 in case B                  <BR/> 
      integer kbl(ij_bounds)     ! index of first grid level below hbl         <BR/>
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="wscale" INTERFACE=""><DESCRIPTION>
 Compute turbulent velocity scales.
 Use a 2D-lookup table for wm and ws as functions of ustar and
 zetahat (=von_karman*sigma*hbl*bfsfc).

 Note: the lookup table is only used for unstable conditions
 (zehat &lt;= 0), in the stable domain wm (=ws) gets computed
 directly.

  model

  input                                                               <BR/>
      real sigma(ij_bounds)  = normalized depth (d/hbl)               <BR/>
      real hbl(ij_bounds)    = boundary layer depth (m)               <BR/>  
      real ustar(ij_bounds)  = surface friction velocity    (m/s)     <BR/>  
      real bfsfc(ij_bounds)  = total surface buoyancy flux (m^2/s^3)  <BR/>
  output                                                               <BR/>  
      real wm(ij_bounds),ws(ij_bounds) ! turbulent velocity scales at sigma
 local                                                                 <BR/>  
      real zehat           ! = zeta *  ustar**3

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="ri_iwmix" INTERFACE=""><DESCRIPTION>
 Compute interior viscosity and diffusivity due 
 to shear instability (dependent on a local richardson number),
 to background internal wave activity, and 
 to static instability (local richardson number &lt; 0).

     inputs:

      nk             = number of vertical levels                               <BR/>
      visc_cbu_iw    = background "visc_cbu" (m**2/sec) due to internal waves  <BR/>
      diff_cbt_iw    = background "diff_cbt" (m**2/sec) due to internal waves  <BR/>
      visc_cbu_limit = largest "visc_cbu" in regions of gravitational          <BR/>
                       instability (m**2/sec)                                  <BR/>
      diff_cbt_limit = largest "diff_cbt" in regions of gravitational          <BR/>
                       instability (m**2/sec)                       

     outputs:

      visc_cbu = viscosity coefficient at bottom of "u" cells (m**2/s)         <BR/>   
      diff_cbt = diffusion coefficient at bottom of "t" cells (m**2/s)         <BR/>  
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="ddmix" INTERFACE=""><DESCRIPTION>
 Rrho dependent interior flux parameterization.
 Add double-diffusion diffusivities to Ri-mix values at blending
 interface and below. salt fingering code modified july 2003
 by stephen.griffies based on NCAR CCSM2.x

     inputs: 

      nk     = number of vertical levels                                 <BR/>
      real talpha(imt,km,jmw)   ! d(rho)/ d(pot.temperature) (kg/m^3/C)  <BR/> 
      real sbeta(imt,km,jmw)    ! d(rho)/ d(salinity)     (kg/m^3/PSU)  

     outputs:

      diff_cbt = diffusion coefficient at bottom of "t" cells (m**2/s)


 local

      real alphaDT(imt,km,jmw)   ! alpha * DT  across interfaces          <BR/>   
      real betaDS(imt,km,jmw)    ! beta  * DS  across interfaces          <BR/>  

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="blmix_kpp" INTERFACE=""><DESCRIPTION>
 Mixing coefficients within boundary layer depend on surface
 forcing and the magnitude and gradient of interior mixing below
 the boundary layer ("matching").

 CAUTION: if mixing bottoms out at hbl = zt(nk) then
 fictitious layer at nk+1 is needed with small but finite width 
 dzt(nk+1) (eg. epsln = 1.e-20).  

     inputs:

      real ustar(ij_bounds)    ! surface friction velocity         (m/s)  <BR/>
      real bfsfc(ij_bounds)    ! surface buoyancy forcing     (m^2/s^3)   <BR/>
      real hbl(ij_bounds)      ! boundary layer depth              (m)    <BR/>
      real stable(ij_bounds)   ! = 1 in stable forcing                    <BR/>
      real caseA(ij_bounds)    ! = 1 in case A                            <BR/>
      integer kbl(ij_bounds)   ! index of first grid level below hbl

     outputs:

      visc_cbu = viscosity coefficient at bottom of "u" cells (m**2/s)    <BR/>     
      diff_cbt = diffusion coefficient at bottom of "t" cells (m**2/s)    <BR/>

      real dkm1(ij_bounds,3)    = boundary layer diff_cbt at kbl-1 level  <BR/> 
      real blmc(ij_bounds,nk,3) = boundary layer mixing coeff.(m**2/s)    <BR/> 
      real ghats(ij_bounds,nk)  = nonlocal scalar transport               <BR/> 

    local:

      real gat1(ij_bounds,3)                                               <BR/>    
      real dat1(ij_bounds,3)                                               <BR/> 
      real sigma(ij_bounds)              = normalized depth (d / hbl)      <BR/> 
      real ws(ij_bounds), wm(ij_bounds)  = turbulent velocity scales (m/s) 

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="enhance" INTERFACE=""><DESCRIPTION>
 Enhance the diffusivity at the kbl-.5 interface

 input
      integer kbl(ij_bounds)   =  grid above hbl                      <BR/>
      real hbl(ij_bounds)      =  boundary layer depth (m)            <BR/>
      real dkm1(ij_bounds,3)   =  bl diffusivity at kbl-1 grid level  <BR/>
      real caseA(ij_bounds)    =  1 in caseA, = 0 in case B

 input/output
      real ghats(ij_bounds,nk)  =  nonlocal transport     (s/m**2)     <BR/>
      modified ghats at kbl(i)-1 interface        
 output
      real blmc(ij_bounds,nk,3) = enhanced boundary layer mixing coefficient

 local
  real delta                    =  fraction hbl lies beteen zt neighbors

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="ri_for_kpp" INTERFACE=""><DESCRIPTION>
 Compute Richardson number on tracer and velocity cell bottoms. 
  rit = richardson number at bottom of T cells <BR/>
  riu = richardson number at bottom of U cells
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="watermass_diag_init" INTERFACE=""><DESCRIPTION>
 Initialization of watermass diagnostic output files. 
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="watermass_diag" INTERFACE=""><DESCRIPTION>
 Diagnose effects from KPP nonlocal on the watermass transformation.
 </DESCRIPTION></SUBROUTINE></MODULE>
