<?xml version="1.0" standalone="no"?>
<!DOCTYPE MODULE SYSTEM 
          "/net2/nnz/opt/tools/xmlDoc/share/xmlDoc/schema/fms.dtd">
<MODULE NAME="ocean_vert_tidal_mod" DATE="0000/00/00 00:00:00" HISTORY="http://cobweb.gfdl.noaa.gov/fms-cgi-bin/viewcvs/FMS/ocean/mom5/ocean_param/vertical"><CONTACT EMAIL="GFDL.Climate.Model.Info@noaa.gov"> S. M. Griffies 
</CONTACT><REVIEWER EMAIL="hsimmons@iarc.uaf.edu"> Harper Simmons 
</REVIEWER><REVIEWER EMAIL="GFDL.Climate.Model.Info@noaa.gov"> Hyun-Chul Lee 
</REVIEWER><OVERVIEW>
 This module computes a vertical diffusivity and vertical 
 viscosity deduced from barotropic and baroclinic tidal 
 dissipation.  Assume Prandtl number unity. 
</OVERVIEW><DESCRIPTION>
 This module computes a vertical diffusivity and vertical 
 viscosity deduced from barotropic and baroclinic tidal 
 dissipation. For the baroclinic dissipation, we follow
 Simmons etal, and for the barotropic dissipation we follow 
 Lee etal. Assume Prandtl number unity. 

 This code is more general than that in the ocean_vert_kpp_mom4p0_mod.
 The KPP_mom4p0 code remains part of MOM for legacy purposes. 
</DESCRIPTION><INFO><REFERENCE>
 Simmons, Jayne, St. Laurent, and Weaver, 2004:
 Tidally driven mixing in a numerical model of the ocean 
 general circulation.  Ocean Modelling, vol. 6,
 pages 245-263.
 </REFERENCE><REFERENCE>
 Jayne and St. Laurent, 2001:
 Parameterizing tidal dissipation over rough topography.
 Geophysical Research Letters, vol. 28, pages 811-814.
 </REFERENCE><REFERENCE>
 Hyun-Chul Lee, A. Rosati, and M.J. Spelman, 2006: 
 Barotropic tidal mixing effects in a coupled climate model:
 ocean conditions in the northern Atlantic
 Ocean Modelling, vol 11, pages 464--477
 </REFERENCE><REFERENCE>
 Osborn, T.R., 1980: Estimates of the local rate of vertical diffusion 
 from dissipation measurements.  JPO, vol. 10, pages 83-89.
 </REFERENCE><REFERENCE>
 Munk and Anderson, 1948: Notes on a theory of the thermocline. 
 Journal of Marine Research, vol 3. pages 276-295.
 </REFERENCE><REFERENCE>
 S.M. Griffies, Elements of MOM (2012)
 </REFERENCE></INFO><NAMELIST NAME="ocean_vert_tidal_nml"><DATA NAME="use_this_module=" TYPE="logical">
  Must be .true. to use this module. Default is false.
  </DATA><DATA NAME="debug_this_module" TYPE="logical">
  For debugging purposes.
  </DATA><DATA NAME="use_wave_dissipation=" TYPE="logical">
  Set to .true. for using the Simmons etal scheme for 
  obtaining a diffusivity and viscosity based on internal 
  wave breaking.  This is a general form of the KPP 
  scheme "int_tidal_mix". 
  Default use_wave_dissipation=.false.
  </DATA><DATA NAME="use_drag_dissipation=" TYPE="logical">
  Set to .true. for using the Lee etal scheme for 
  obtaining a diffusivity and viscosity based on drag
  of barotropic tides on bottom.  This is a general 
  form of the KPP scheme "coastal_tidal_mix".
  Default use_drag_dissipation=.false.
  </DATA><DATA NAME="use_leewave_dissipation=" TYPE="logical">
  Set to .true. for using a prototype Nikurashin scheme for 
  obtaining a diffusivity and viscosity based on breaking 
  leewaves. This scheme is not related to tides, but it 
  is incorporated to the baroclinic tide parameterization scheme
  as a prototype.  It will be placed into ts own module when 
  the parameterization matures. 
  Default use_leewave_dissipation=.false.
  </DATA><DATA NAME="read_leewave_dissipation" TYPE="logical">
  If .true. then read in leewave dissipation from a file. 
  Default read_leewave_dissipation=.false.
  </DATA><DATA NAME="read_wave_dissipation" TYPE="logical">
  If .true. then read in wave dissipation computed from 
  Jayne and St.Laurent (2001) tide model (or another model). 
  Default read_wave_dissipation=.false.
  </DATA><DATA NAME="fixed_wave_dissipation" TYPE="logical">
  If .true. then fix the wave dissipation from that 
  read in by the tide model, such as Jayne and St.Laurent (2001).
  This power dissipation will be employed
  for computing wave induced mixing.  
  Default fixed_wave_dissipation=.false.
  </DATA><DATA NAME="read_roughness" TYPE="logical">
  If .true. then read in bottom roughness amplitude h, 
  where roughness_length = kappa*h^2, with kappa a 
  representative roughness wavelength and h a  
  representative topographic amplitude.  This information is 
  used for the Simmons etal wave dissipation parameterization.  
  </DATA><DATA NAME="reading_roughness_length" TYPE="logical">
  If .true., then the field in the roughness file is 
  roughness_length = kappa*h^2, with kappa a 
  representative roughness wavelength and h a  
  representative topographic amplitude.  This information is 
  used for the Simmons etal wave dissipation parameterization.  
  Default reading_roughness_length=.false.
  </DATA><DATA NAME="reading_roughness_amp" TYPE="logical">
  If .true., then the field in the roughness file is 
  roughness_amp=h, where roughness_length=kappa*h^2.
  This information is used for the Simmons etal wave
  dissipation parameterization.  
  Default reading_roughness_amp=.false.
  </DATA><DATA NAME="default_roughness_length" UNITS="m" TYPE="real">
  Default value for kappa*h^2 = roughness length for use 
  in the absence of a roughness length dataset. MOM default
  is default_roughness_length=25.0m.
  </DATA><DATA NAME="read_tide_speed" TYPE="logical">
  If .true. then read in tidal speed (m/s) from a tidal model.   
  This information is used for the computing the energy dissipation 
  from tides.
  scheme.  
  </DATA><DATA NAME="tide_speed_data_on_t_grid" TYPE="logical">
  To set the input tide speed data on T-grid, set to true.
  Otherwise, set to false.
  Default tide_speed_data_on_t_grid=.true.
  </DATA><DATA NAME="roughness_scale" UNITS="m" TYPE="real">
  Scale for the roughness that characterizes the roughness
  affecting the tidal dissipation process. Used for setting 
  roughness_length via roughness_length = kappa*h^2, with 
  kappa = 2pi/(roughness_scale) and h=topography amplitude. 
  Default roughness_scale=1e4 as in Jayne and St. Laurent (2001)
  </DATA><DATA NAME="default_tide_speed" UNITS="m/s" TYPE="real">
  Default value for tidal speed for use in the absence of a 
  value from a tidal model. 
  </DATA><DATA NAME="speed_min" UNITS="m/s" TYPE="real">
  For the drag scheme, we set the diffusivity as well as the 
  Richardson number to zero if the tide speed is less than 
  speed_min.  This serves two purposes: 1/ to reduce overflows
  in some of the diagnostics; 2/ to set the drag induced diffusivity
  to zero in regions where the tide speed is small. Default
  speed_min=5e-3m/s. 
  </DATA><DATA NAME="shelf_depth_cutoff" UNITS="m" TYPE="real">
  For use in defining a mask for the Simmons scheme, with depths
  shallower than shelf_depth_cutoff removed from the scheme. 
  shelf_depth_cutoff=1000m in Simmons etal.  
  Default shelf_depth_cutoff=-1000m so there is no cutoff. 
  </DATA><DATA NAME="decay_scale" UNITS="m" TYPE="real">
  In the Simmons etal vertical profile function, the exponential decay 
  scale is determined by this parameter.  Default = 500m as in Simmons 
  etal (2004).  This vertical profile determines how to deposit the 
  internal wave energy within a vertical column. 
  </DATA><DATA NAME="tidal_diss_efficiency" UNITS="dimensionless" TYPE="real">
  Fraction of barotropic tidal energy that is dissipated locally, as 
  opposed to that which propagates away.  Default=1/3 as in 
  Simmons etal (2004).
  </DATA><DATA NAME="mixing_efficiency" UNITS="dimensionless" TYPE="real">
  Fraction of energy that is dissipated which is converted into dianeutral 
  diffusion of tracer.  Default=0.2 based on Osborn (1980).
  </DATA><DATA NAME="mixing_efficiency_n2depend" TYPE="logical">
  Allow for mixing efficiency to be a function of 
  N^2/(N^2+Omega^2), which is close to unity except in 
  regions where N is very small. 
  Default mixing_efficiency_n2depend=.false.
  </DATA><DATA NAME="wave_energy_flux_max" UNITS="W/m2" TYPE="real">
  The maximum mechanical energy from internal tides that is 
  provided for mixing.  Default wave_energy_flux_max=0.1Watt/m^2. 
  </DATA><DATA NAME="wave_diffusivity_monotonic" TYPE="logical">
  Enforce a monotonic decay of the wave dissipation diffusivity,
  with largest values near bottom and smaller as move to shallower
  water.  This behaviour is not guaranteed in general, since the 
  division by the buoyancy frequency can give non-monotone diffusivities.  
  Default wave_diffusivity_monotonic=.true. 
  </DATA><DATA NAME="munk_anderson_p" UNITS="dimensionless" TYPE="real">
  The p constant in the Munk-Anderson scheme employed by Lee etal. 
  This parameter is minus the "p_tide" parameter in the KPP schemes. 
  Default munk_anderson_p=0.25
 </DATA><DATA NAME="munk_anderson_sigma" UNITS="dimensionless" TYPE="real">
  The sigma constant in the Munk-Anderson scheme employed by Lee etal. 
  This parameter is called "sigma_tide" in the KPP schemes. 
  Default munk_anderson_sigma=3.0
 </DATA><DATA NAME="drag_dissipation_use_cdbot" TYPE="logical">
  For using the cdbot_array computed from ocean_bbc.F90 module.  
  Default drag_dissipation_use_cdbot=.false., as this is consistent 
  with earlier simulations.  
 </DATA><DATA NAME="bottom_drag_cd" UNITS="dimensionless" TYPE="real">
  Bottom drag coefficient from Lee etal. Default bottom_drag_cd=2.4e-3 
 </DATA><DATA NAME="background_diffusivity" UNITS="m^2/s" TYPE="real">
  Background vertical diffusivity not accounted for by the tidal schemes
  nor any other scheme such as KPP.  Default=0.1e-4. 
  </DATA><DATA NAME="background_viscosity" UNITS="m^2/s" TYPE="real">
  Background vertical viscosity not accounted for by the tidal schemes
  nor any other scheme such as KPP.  Default=0.1e-4. 
  </DATA><DATA NAME="max_wave_diffusivity" UNITS="m^2/s" TYPE="real">
  Maximum tracer diffusivity deduced from the wave dissipation
  scheme from Simmons etal. Default = 5.e-3 m^2/sec.
  </DATA><DATA NAME="max_drag_diffusivity" UNITS="m^2/s" TYPE="real">
  Maximum tracer diffusivity deduced from the drag dissipation scheme
  from Lee etal. Default = 5.e-3 m^2/sec.
  </DATA><DATA NAME="drag_dissipation_efold" TYPE="logical">
  For setting an efolding whereby the drag dissipation diffusivity 
  exponentially decreases as move upward in the water column.    
  There are good reasons to set this logical to true, as the scheme 
  can produce unreasonably large diffusivities far from the bottom, if 
  there are tides in the deep ocean. 
  Default drag_dissipation_efold=.true. 
  </DATA><DATA NAME="drag_dissipation_tide_period" UNITS="s" TYPE="real">
  Characteristic tide period for use in computing efolding depth for
  the tide drag scheme.  Default = 12*60*60 = 12hours for semi-diurnal tide.
  </DATA><DATA NAME="drag_mask_deep" TYPE="logical">
  For masking out the deep ocean regions for the drag dissipation
  scheme.  This scheme is meant to apply only in shallow shelves,
  so it is physically relevant to mask it out.  We apply a mask as
  determined by the ratio of the frictional tide depth scale and the 
  total ocean depth.    
  Default drag_mask_deep=.true. 
  </DATA><DATA NAME="drag_mask_deep_ratio" TYPE="real">
  For determining the drag dissipation mask.
  The mask = 0 in regions where 
  tide_depth/total_depth &lt; drag_mask_deep_ratio
  Default drag_mask_deep_ratio=0.1 
  </DATA><DATA NAME="smooth_ri_drag_cgrid" TYPE="logical">
  For smoothing the raw C-grid Richardson number computed for
  the drag scheme on the Cgrid. Default smooth_ri_drag_cgrid=.true.
  </DATA><DATA NAME="use_legacy_methods" TYPE="logical">
  To compute all mixing coefficients using legacy methods. 
  There are good reasons to prefer the newer approaches, which motivates 
  setting the default use_legacy_methods=.false.
  </DATA><DATA NAME="drhodz_min" UNITS="kg/m^3" TYPE="real">
  Minimum absolute value for the drhodz used to compute N^2 and rhoN2.
  This value is needed in order to regularize the diffusivity computed
  from the tide mixing schemes. Default is drhodz_min=1e-10, which 
  is much smaller than the (N^2)min = 10^-8 sec^-2 used by Simmons 
  etal. There is some sensitivity to the choice of drhodz_min, with 
  larger values leading to reduced deep diffusivities, due to the 
  N^-2 dependence in the diffusivity calculation. 
  </DATA><DATA NAME="smooth_bvfreq_bottom" TYPE="logical">
  For smoothing the buoyancy frequency at the bottom.
  Default smooth_bvfreq_bottom=.true.
  </DATA><DATA NAME="vel_micom_smooth" UNITS="m/sec" TYPE="real">
  Velocity scale that is used for computing the MICOM Laplacian mixing 
  coefficient used in the Laplacian smoothing of diffusivities. 
  Default vel_micom_smooth=0.2.
  </DATA><DATA NAME="smooth_rho_N2" TYPE="logical">
  For smoothing the rho_N2 field via a 1-2-1 filter in 
  vertical.  This is useful to produce smoother diffusivities. 
  Default is smooth_rho_N2=.true.
  </DATA><DATA NAME="num_121_passes" TYPE="integer">
  Number of passes of 1-2-1 filter in vertical for 
  smoothing the rho_N2 field. Default num_121_passes=1.
  </DATA></NAMELIST><USE NAME="       constants_mod"/><USE NAME="    diag_manager_mod"/><USE NAME="             fms_mod"/><USE NAME="     mpp_domains_mod"/><USE NAME="             mpp_mod"/><USE NAME="   ocean_domains_mod"/><USE NAME=" ocean_operators_mod"/><USE NAME="ocean_parameters_mod"/><USE NAME="     ocean_types_mod"/><USE NAME=" ocean_workspace_mod"/><SUBROUTINE NAME="ocean_vert_tidal_init" INTERFACE=""><DESCRIPTION>
 Initialization for the ocean_vert_tidal module.
 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="vert_mix_tidal" INTERFACE=""><DESCRIPTION>
 This subroutine computes vertical tracer diffusivity and viscosity
 based on one or both of the following dissipation mechanisms:

 1. internal wave breaking as parameterized by Simmons etal.

 2. barotropic tides feeling the bottom drag, as parameterized by 
    Lee etal.  

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="compute_bvfreq" INTERFACE=""><DESCRIPTION>
 This subroutine computes the absolute value of rho*N^2 and abs of 
 N^2, with N^2 the squared Brunt-Vaisala (or buoyancy) frequency. 

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="vert_mix_wave" INTERFACE=""><DESCRIPTION>
 This subroutine computes dia-surface tracer diffusivity based on the 
 methods of Simmons et al., which consider dissipation from breaking
 internal gravity waves and their conversion into local dia-surface
 mixing, which is parameterized as diffusion.  

 Also compute a prototype parameterization of mixing due to 
 breaking leewaves from Nikurashin. 

 We assume a unit Prandtl number.

 Note that if umask(i,j,k) is 1.0, then so is 
 tmask(i,j,k), tmask(i+1,j,k), tmask(i,j+1,k), and tmask(i+1,j+1,k).
 So there is no need to compute the "active_cells" when doing the 
 space average to go from t-cell to u-cell to compute visc_cbu.

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="vert_mix_drag_bgrid" INTERFACE=""><DESCRIPTION>
 This subroutine computes dia-surface tracer diffusivity based on the 
 methods of Lee etal., which consider the dissipation from barotropic tides
 rubbing against the ocean bottom. 

 We assume B-grid layout for the velocity 

 We assume a unit Prandtl number, so compute the viscosity as a four-point
 average of the diffusivity. 

 We perform various averages here in order to smooth Richardson number.

 1. compute Richardson number on U-cell by averaging bvfreq from T-cell
 2. average U-cell Richardson number to then get T-cell diffusivity 
 3. average T-cell diffusivity to get U-cell viscosity. 

 Note that if umask(i,j,k)==1.0, then so is tmask(i,j,k), tmask(i+1,j,k), 
 tmask(i,j+1,k), and tmask(i+1,j+1,k). So there is no need to compute 
 active_cells when averaging from T-cell to U-cell.

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="vert_mix_drag_cgrid" INTERFACE=""><DESCRIPTION>
 This subroutine computes dia-surface tracer diffusivity based on the 
 methods of Lee etal., which consider the dissipation from barotropic tides
 rubbing against the ocean bottom. 

 We assume a unit Prandtl number, so compute the viscosity as a four-point
 average of the diffusivity. 

 We assume C-grid layout for the velocity, which renders slight
 distinctions for the calculation of Richardson number. Otherwise, the 
 calculations are the same as the Bgrid. We introduce this separate
 routine, however, to enable easier bitwise agreement with older 
 model results.  Also, further development of this scheme may lead
 to more distinctions from the Bgrid.  

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="compute_bvfreq_legacy" INTERFACE=""><DESCRIPTION>
 This subroutine computes the absolute value of rho*N^2 and abs of 
 N^2, with N^2 the squared Brunt-Vaisala (or buoyancy) frequency. 

 This routine employs a legacy approach, which is not recommended.
 It remains solely to allow exact reproduction of older results.

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="vert_mix_wave_legacy" INTERFACE=""><DESCRIPTION>

 Legacy routine maintained only to exactly reproduce older results.
 It is not recommended for new experiments, as it uses some obsolete
 methods. 

 This subroutine computes dia-surface tracer diffusivity based on the 
 methods of Simmons etal., which consider the dissipation from breaking
 internal gravity waves and their conversion into local dia-surface
 diffusion.  

 We assume a unit Prandtl number, so compute the viscosity as a four-point
 average of the diffusivity. 

 Note that if umask(i,j,k) is 1.0, then so is 
 tmask(i,j,k), tmask(i+1,j,k), tmask(i,j+1,k), and tmask(i+1,j+1,k).
 So there is no need to compute the "active_cells" when doing the 
 space average to go from t-cell to u-cell to compute viscosity.

 </DESCRIPTION></SUBROUTINE><SUBROUTINE NAME="vert_mix_drag_legacy" INTERFACE=""><DESCRIPTION>

 Legacy routine maintained only to exactly reproduce older results.
 It is not recommended for new experiments, as it uses some obsolete
 methods. 

 This subroutine computes dia-surface tracer diffusivity based on the 
 methods of Lee etal., which consider the dissipation from barotropic tides
 rubbing against the ocean bottom. 

 We assume a unit Prandtl number, so compute the viscosity as a four-point
 average of the diffusivity. 

 We perform various averages here in order to smooth Richardson number.

 1. compute Richardson number on U-cell by averaging bvfreq from T-cell
 2. average U-cell Richardson number to then get T-cell diffusivity 
 3. average T-cell diffusivity to get U-cell viscosity. 

 Note that if umask(i,j,k)==1.0, then so is tmask(i,j,k), tmask(i+1,j,k), 
 tmask(i,j+1,k), and tmask(i+1,j+1,k). So there is no need to compute 
 active_cells when averaging from T-cell to U-cell.

 </DESCRIPTION></SUBROUTINE></MODULE>
