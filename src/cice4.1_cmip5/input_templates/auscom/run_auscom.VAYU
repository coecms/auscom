#!/bin/ksh
#############################################################################
#                            run_auscom.VAYU                                #
#############################################################################
# *** Set up the running environment and run the auscom coupled model  ***  #
#
#   'AusCOM' is a coupled ocean and sea ice model consisting of 3 components
#      1. matm    (a data atmospheric model, providing atmospheric forcing)
#      2. cice4.1 (LANL sea ice model) 
#      3. mom4p1  (GFDL ocean model)
#      built under the OASIS3 PRISM_2-5 framework
#
#   This sample run is set up on the NCI VAYU platform for 128 processes: 
#   1 for cpl, 1 for matm, 6 for cice, and 120 for mom4 (mono-cpu cpling) 
#   if DEBUG=yes:
#     *This debug run is set up on the NCI VAYU platform for 4 processes: 
#      1 for cpl, 1 for matm, 1 for cice, and 1 for mom4 (mono-cpu cpling) 
#     *Change ncpus=4
#     *Do qsub -I -q normal -v DISPLAY -p 1023 -l ncpus=4 -l walltime=100:00 \
#      -lvmem=24gb -l software=totalview/10
#      and run this script
#############################################################################
#
# New setup
# Each component now runs in its own work directory
# This avoids namespace pollution and renders many of the AusCOM changes to the
# submodels obsolete.
#
# Russ Fiedler
#############################################################################
#
# 0. Prologue
#
#############################################################################
#PBS -P p73
#PBS -W group_list=p66
#PBS -q normal
#PBS -l walltime=00:10:00
##PBS -l walltime=0:06:00
##PBS -l vmem=128GB
#PBS -l vmem=20GB
##PBS -l ncpus=128
#PBS -l ncpus=32
#PBS -l software=vampir
#PBS -l other=rms
###PBS -M petteri.uotila@csiro.au
#PBS -N reg1-cnyf2-06
#PBS -wd

date
set -e
set -xv
ulimit -s unlimited
ulimit -a

#
#-- Export System depending variables
#
export MPIPROGINF=DETAIL;
export F_PROGINF=detail;
export F_FTRACE=YES;
export MPLARGS=" " ;
export F_SETBUF06=50000
export F_SETBUF07=50000
export F_SETBUF08=50000
export ATM_COMPARAL=1
export F_SYSLEN=300
export F_SETBUF00=50000
MPIEXPORT="F_PROGINF F_SYSLEN"
MPIEXPORT="${MPIEXPORT} MPIPROGINF F_FTRACE MPISUSPEND"
MPIEXPORT="${MPIEXPORT} F_SETBUF00 F_SETBUF06 F_SETBUF07 F_SETBUF08"
export MPI_MULTITASKMIX="ON"
export MPIEXPORT="${MPIEXPORT} MPI_MULTITASKMIX"
export MPI_BUFFER_MAX=5000000

#############################################################################
#
# 1. Primary Setups
#
#############################################################################
#
## 1.1 Define experiment ID etc.
#
project=p66		# /short disk 'owned' by project (e.g., p66)
jobid=$PBS_JOBID	# job-id assigned by PBS (the queue sys)
job=$PBS_JOBNAME	# name of this script
chan=MPI1		# Message Passage (MPI1/MPI2)

expid=reg1-cnyf2-06		# change expid for each new experiment
atmdata=core2		# choose the atmospheric forcing dataset
atm_forcing="'${atmdata}'"   # (ncep2, era40, core2, or um96 etc.)
datatype=NY		# NY/IA: Normal Year/Interannual Annual
year_data_end=2007	# data NOT available after this year

#
## 1.2 Define all associated paths
#

# Location where jobs are submitted (and this script is located):
cd `pwd`/../..
AusCOMHOME=`pwd`
model=${AusCOMHOME##*/}		#the model name, i.e., AusCOM1.0
jobdir=$AusCOMHOME/exp/$expid

# Location of preprocessed input files for the coupled model:
inputdir=$AusCOMHOME/input

# Location where the model exectuables are stored:
bindir=$AusCOMHOME/bin

# Location where outputs are to be stored:
datahome=/short/$project/$USER/OUTPUT
outputdir=$datahome/$model/$expid
restdir=${outputdir}/restart
histdir=${outputdir}/history

# Location where the sub-models and coupler are actually runing:
workhome=/short/$project/$USER
rundir=$workhome/RUNNING/$model/$expid         

momrundir=$rundir/MOM_RUNDIR
matmrundir=$rundir/MATM_RUNDIR
cicerundir=$rundir/CICE_RUNDIR
oasisrundir=$rundir/OASIS_RUNDIR

#############################################################################
#
# 2. Exp/Run Time Control etc.
#
#############################################################################
# 
## 2.1 Runtime control for the whole exp and this segment run 
#
# if DEBUG=yes run with totalview on a interactive qsub job
DEBUG=no

# Initial and final date of the experiment
if [[ $DEBUG = "yes" ]]; then
    iniyear=1;	finalyear=1;		typeset -Z4 iniyear  finalyear
    inimonth=1;	finalmonth=2;		typeset -Z2 inimonth finalmonth
    iniday=1;	finalday=1;		typeset -Z2 iniday   finalday
else
    iniyear=1;	finalyear=1;		typeset -Z4 iniyear  finalyear
    inimonth=1;	finalmonth=1;		typeset -Z2 inimonth finalmonth
    iniday=1;	finalday=2;		typeset -Z2 iniday   finalday
fi

# Duration of this run (maybe the most often visited place for test/short runs):
if [[ $DEBUG = "yes" ]]; then
    nyear=0  		# number of years (ALWAYS 0 ! change nmonth etc...)
    nmonth=1		# number of months
    nday=0			# number of days
else
    nyear=0  		# number of years (ALWAYS 0 ! change nmonth etc...)
    nmonth=0		# number of months
    nday=2			# number of days
    #nmonth=0		# if not a whole month. set length "nday=xx" below
    #nday=5			# days of this run. important for quick tests
fi

# Time steps
dt_cpl_ai=21600		#air-ice coupling interval in seconds
dt_cpl_io=3600		#ice-ocn coupling interval in seconds
dt_oce=3600		#oce model timestep
dt_atm=3600		#atm model timestep
dt_ice=3600		#ice model timestep

#
## 2.2 Processor usage for this run
#

# Processor for each executable:
nproc_cpl=1		#always 1
if [[ $DEBUG = "yes" ]]; then
    nproc_atm=1		#       1
    nproc_ice=1		#changable
    nproc_oce=120	#changable 
else
    nproc_atm=1		#       1
    nproc_ice=1		#changable
    #nproc_oce=120	#changable 
    nproc_oce=28	#changable 
fi
  
# Total number of procs for this job (must <= requested in the #PSB line):
(( ntproc = nproc_atm + nproc_ice + nproc_oce + nproc_cpl ))
  
# Currently AusCOM is hardwired for mono-cpu coupling:
ncplproc_atm=1
ncplproc_ice=1
ncplproc_oce=1

# Decide ocean domain MPI partitioning pattern:
if [[ $DEBUG = "yes" ]]; then
    oce_nx=8; oce_ny=15	#oce_nx x oce_ny = nproc_oce
else
    oce_nx=4; oce_ny=7	#oce_nx x oce_ny = nproc_oce
    #oce_nx=8; oce_ny=15	#oce_nx x oce_ny = nproc_oce
fi

#
## 2.3 Names of the 4 executables 
#

oa3_exe=oasis3
atm_exe=matmxx		#These 3 sub-model exe names much be same as
ice_exe=cicexx		#defined in namcouple and model code
oce_exe=mom4xx		#(character*6)

#
## 2.4 Calendar date control
#
#-- Calendar type: available calendar options:
#     0   : No leap year (365 days per year)
#     1   : Gregorian (365/366 days per year)
#     n   : Equal months of "n" days (30 for 30 day months)

# Default set as below (for era40 and ncep2 forcing)
caltype=1               #0, 1 or n (eg, 30 for 30 day months)
cal_type="'julian'"     #for caltype=1; "'thirty_day'" for caltype=30. 

# For core and core2 forcing we must use below:
if [[ $atm_forcing = "'core'" || $atm_forcing = "'core2'" ]]; then
  caltype=0
  cal_type="'NOLEAP'"
fi

# Dates in format YYYYMMDD:
inidate=${iniyear}${inimonth}${iniday}
finaldate=${finalyear}${finalmonth}${finalday}

cd $jobdir

typeset -Z4 year; typeset -Z2 month day
if [ ! -f ${expid}.date ]; then
  year=${iniyear}		#
  month=${inimonth}		#
  day=${iniday}			#
  jobnum=1			# 1 for initial run, >1 for continue runs
  truntime0=0			# total accumulated runtime by the end of last run
  if [ -f  ${expid}.log ]; then
    rm ${expid}.log
  fi
  echo "`date` :  Beginning of Experiment ${expid}" > ${expid}.log
else
  read year month day jobnum truntime0 < ${expid}.date
fi

date=${year}${month}${day}
echo " " >> ${expid}.log
echo "`date` :  ${jobnum} ${date} - starting pre-processing" >> ${expid}.log

# use an external tool to work out the run date inforamtion. 
# there must be a easier way for this. but it works ok anyway.

cat > calendar.in << EOF
  ${inidate} ${date} ${nyear} ${nmonth} ${nday} ${caltype}
EOF

$AusCOMHOME/bin/calendar.VAYU < calendar.in > calendar.out 

prevdate=`cat calendar.out | cut -c '2-9'`
enddate=`cat calendar.out | cut -c '11-18'`
nextdate=`cat calendar.out | cut -c '20-27'`
previnidate=`cat calendar.out | cut -c '29-36'`
days_in_run=`cat calendar.out | cut -c '38-45'`
days_since_start=`cat calendar.out | cut -c '47-54'`
date_in_days=`cat calendar.out | cut -c '56-63'`
days_this_year=`cat calendar.out | cut -c '65-67'`
rm calendar.in calendar.out
prevyear=` echo "$prevdate" | cut -c '1-4'`
prevmonth=` echo "$prevdate" | cut -c '5-6'`
prevday=` echo "$prevdate" | cut -c '7-8'`
endyear=` echo "$enddate" | cut -c '1-4'`
endmonth=` echo "$enddate" | cut -c '5-6'`
endday=` echo "$enddate" | cut -c '7-8'`
nextyear=` echo "$nextdate" | cut -c '1-4'`
nextmonth=` echo "$nextdate" | cut -c '5-6'`
nextday=` echo "$nextdate" | cut -c '7-8'`
previniyear=` echo "$previnidate" | cut -c '1-4'`
previnimonth=` echo "$previnidate" | cut -c '5-6'`
previniday=` echo "$previnidate" | cut -c '7-8'`

echo ""
echo "first day of this run:		${date}"
echo "last day of this run:		${enddate}"
echo "initial date of the experiment:	${inidate}"
echo "final date of the experiment:	${finaldate}"
echo "day before the initial date:	${previnidate}"
echo "last day of the previous run:	${prevdate}"
echo "first day of the next run:	${nextdate}"
echo ""
echo "number of days in this run:	${days_in_run}"
echo "number of days since beginning of the experiment: ${days_since_start}"
echo ""
(( runtime = ${days_in_run} * 86400 ))  #duration of this run in seconds
echo "duration of this run in seconds:	${runtime}"

#############################################################################
#
# 3. Getting All Files into the Run Directory
#
#############################################################################

#
## 3.1 Grids, IC, forcing, exectuables and some preprocessed auxilary files
#

# following setup needs two things be decided first:

boundary_layer=gfdl	# <==how to calculte surface fluxes decided here
runoff_data=core	# <==regrided core rundoff instead of that interpolated by oasis
cold_start=1		# 1/0, this experiment starts from 'scratch'/spinup 
if [ $cold_start = 0 ]; then	#ie, warm start
   # use existing AusCOM run restart to initialise this experiment (for jobnum=1)
   # * next 4-5 lines specify the restart location -----------#
   owner=pju565
   expname=sis2-cnyf2-14
   ic_year=15
   access=~$owner	#if run under $HOME
   #access=/short/p66/$owner	#if run under /short/p66 disk
   #----------------------------------------------------------#
   typeset -Z4 ic_year
   (( ic_yearp1 = $ic_year + 1 ))
   typeset -Z4 ic_yearp1
   rest_date_oasis=${ic_year}1231
   rest_date_mom4=${ic_year}1231
   rest_date_cice=${ic_yearp1}0101
   ic_location=$access/$model/output/$expname/restart
   mom4_ic=$ic_location/mom4
   cice_ic=$ic_location/cice
   oasis_ic=$ic_location/oasis3
fi

if [ $jobnum = 1 ]; then	#initial run

  rm -rf $restdir 
  rm -rf $histdir
  rm -rf $AusCOMHOME/output/$expid
  mkdir -p $restdir/cice $restdir/mom4 $restdir/oasis3
  mkdir -p $histdir/cice $histdir/mom4
  ln -s $outputdir $AusCOMHOME/output/.

# Make work directories
  rm -fr $rundir; 
  mkdir -p $rundir
  ln -s $rundir $jobdir/Running.dir
  cd $rundir

# Individual RUNDIRS RASF
  
  mkdir -p $matmrundir/MATM_input				#subdirs for MATM
  mkdir -p $cicerundir/CICE_input -p $cicerundir/CICE_restart -p $cicerundir/CICE_hist 	#subdirs for CICE
  mkdir -p $momrundir/INPUT $momrundir/RESTART $momrundir/MOM4_hist	#subdirs for MOM4
  mkdir -p $oasisrundir
# Old Auscom uses MOM4_input, MOM4_restart. Make compatible for the moment RASF
  cd $momrundir
  if [ ! -f MOM4_input ]; then
     ln -s INPUT MOM4_input
  fi
  if [ ! -f MOM4_restart ]; then
     ln -s RESTART MOM4_restart
  fi
  
  # get the executables:
  cd $rundir
  cp -f $bindir/oasis3_$chan.VAYU   		$oa3_exe
  cp -f $bindir/mom4_MPI1.20101222.VAYU 	$oce_exe
  if [[ $DEBUG = "yes" ]]; then
    cp -f $bindir/cice_$chan.debug.VAYU_${nproc_ice}p	$ice_exe
  else
    cp -f $bindir/cice_$chan.20110526t.VAYU_${nproc_ice}p	$ice_exe
  fi
  cp -f $bindir/matm_MPI1.VAYU_nt62		$atm_exe

  # get input files for oasis3:

  # a. ref and grids data
  cd $oasisrundir
  cp -f $inputdir/oasis3/cf_name_table.txt	.
  cp -f $inputdir/oasis3/oasis3_grids_20101208.nc grids.nc
  cp -f $inputdir/oasis3/oasis3_masks_20101208.nc masks.nc
  cp -f $inputdir/oasis3/oasis3_areas_20101208.nc areas.nc

  # b. restart
  if [ $cold_start = 1 ]; then       #cold start
    # the pre-processed coupling restart files:
    #cp -f $inputdir/oasis3/a2i_10fields.nc	a2i.nc
    cp -f ~dhb599/AusCOM1.0/input/oasis3/a2i.nc-02001231 a2i.nc
    #cp -f $inputdir/oasis3/o2i_7fields.nc	o2i.nc
    cp -f ~dhb599/AusCOM1.0/input/oasis3/o2i.nc-02001231 o2i.nc
    #cp -f $inputdir/oasis3/i2o_13fields.nc	i2o.nc
    cp -f ~dhb599/AusCOM1.0/input/oasis3/i2o.nc-02001231 i2o.nc
    #cp -f $inputdir/oasis3/i2a_1fields.nc	i2a.nc
    cp -f ~dhb599/AusCOM1.0/input/oasis3/i2a.nc-02001231 i2a.nc
  else					#warm start
    # rstart from an existing run (spinup)
    cp -f $oasis_ic/a2i.nc-$rest_date_oasis	a2i.nc
    cp -f $oasis_ic/o2i.nc-$rest_date_oasis	o2i.nc
    cp -f $oasis_ic/i2o.nc-$rest_date_oasis	i2o.nc
    cp -f $oasis_ic/i2a.nc-$rest_date_oasis	i2a.nc
  fi
  
  # get input files for matm (to be done in section 4)
  cd $matmrundir
  ln -sf $oasisrundir/*.nc .

  # input files for cice:
  cd $cicerundir
  if [ $runoff_data = core ]; then
    #cp -f $inputdir/cice/core_runoff_regrid.nc	CICE_input/. 
    cp -f /home/599/sjm599/AusCOM/submodels/mom4p1/src/preprocessing/runoff_regrid/workdir/runoff_regrid.20101208.nc CICE_input/core_runoff_regrid.nc
  fi

  # a. grid data and surface 
  cp -f $inputdir/cice/cice_grid_20101208.nc		CICE_input/grid.nc
  cp -f $inputdir/cice/cice_kmt_20101208.nc		CICE_input/kmt.nc

  # b. IC/restart 
  if [ $cold_start = 1 ]; then       #cold start
    runtype="'initial'"; Lrestart=.false.; ice_ic="'default'"
    #cp -f $inputdir/cice/A2I_time0_10fields.nc	CICE_input/A2I_time0.nc
    cp -f ~dhb599/AusCOM1.0/input/cice/A2I_time1.nc-02001231	CICE_input/A2I_time0.nc
    cp -f $inputdir/cice/SSTS_12Jans.nc 	CICE_input/monthly_sstsss.nc 
    if [ $boundary_layer = gfdl ]; then
      #cp -f $inputdir/cice/uu_star_t0.nc	CICE_input/u_star.nc
      cp -f ~dhb599/AusCOM1.0/input/cice/u_star.nc-02001231	CICE_input/u_star.nc
    fi
  else	#warm start
    runtype="'continue'"; Lrestart=.true.; ice_ic="'default'"
    ice_restart=${cice_ic}/iced.$rest_date_cice
    # instead of just copying the CICE restart dump
    # also reset time
    $bindir/cicedumpdatemodify.py -v -i $ice_restart -o CICE_restart/iced
    # cp -f $ice_restart 				CICE_restart/iced
    echo iced  >  				CICE_restart/ice.restart_file
    cp -f ${cice_ic}/A2I_time1.nc-$rest_date_oasis	CICE_input/A2I_time0.nc
    if [ $boundary_layer = gfdl ]; then
      cp -f ${cice_ic}/u_star.nc-$rest_date_oasis	CICE_input/u_star.nc
    fi
  fi 
  ln -sf $oasisrundir/*.nc .

  # get input files for mom4:
  cd $momrundir
  ln -sf $oasisrundir/*.nc .
  cd INPUT
  cp -f $inputdir/mom4p1_pubrel_18dec2009/field_table_20101213	field_table
  cp -f $inputdir/mom4p1_pubrel_18dec2009/data_table		data_table	
  #cp -f $inputdir/mom4p1_pubrel_18dec2009/grid_spec.auscom.nc	grid_spec.nc
  cp -f /short/p66/sjm599/AusCOM/input/mom4/grid_spec.auscom.20110118.nc grid_spec.nc 
  cp -f /short/p66/sjm599/20080606/geothermal_heating_auscom_20080605.nc geothermal_heating.nc
  #cp -f /short/p66/sjm599/20080606/tides_auscom_20080605.nc     tideamp.nc
  #cp -f /short/p66/sjm599/20080606/roughness_auscom_20080605_roughness_amp.nc roughness_amp.nc
  #cp -f $inputdir/mom4/seawifs_auscom_edit_time.nc		ssw_atten_depth.nc
  cp -f $inputdir/mom4p1_pubrel_18dec2009/salt_sfc_restore.nc 	salt_sfc_restore.nc
  cp -f $inputdir/mom4p1_pubrel_18dec2009/temp_sfc_restore.nc 	temp_sfc_restore.nc
  if [ $cold_start = 1 ]; then 
    #get ocean initial condition (only T-S)
    cp -f $inputdir/mom4p1_pubrel_18dec2009/ocean_temp_salt.nc	ocean_temp_salt.res.nc
  else
    for restfile in `ls ${mom4_ic}/ocean_*-${rest_date_mom4}`; do
       newfile=${restfile##*/}
       cp ${restfile} ${newfile%-*}
    done
    ystart=$ic_yearp1
    if [ $ystart -lt 10 ]; then
      typeset -Z1 ystart
    elif [ $ystart -lt 100 ]; then
      typeset -Z2 ystart
    elif [ $ystart -lt 1000 ]; then
      typeset -Z3 ystart
    elif [ $ystart -lt 10000 ]; then
      typeset -Z4 ystart
    fi
ed ocean_solo.res <<eof
g/$ystart/s/$ystart/${iniyear}/
w
q
eof
  fi	#cold_start

else	#for continue runs
  
  cd $rundir
  rm -f *out* ?weights *.prt* 	#clean up 
  cd $matmrundir
  rm -f *out* ?weights *.prt* 	#clean up 
  cd $cicerundir
  rm -f *out* ?weights *.prt* 	#clean up 
  cd $oasisrundir
  rm -f *out* ?weights *.prt* 	#clean up 
  
  #prepare restart files:

  # for oasis3:  
  cd $oasisrundir
  for resfile in `ls $restdir/oasis3/?2?.nc-${prevdate}`; do
    sresfile=${resfile##*/}		#take away the front path name
    cp $resfile ${sresfile%-*}		#take away the appendix '-YYYYMMDD'
  done

  # for cice: 
  cd $cicerundir
  runtype="'continue'"; Lrestart=.true.; ice_ic="'default'"
  cp $restdir/cice/A2I_time1.nc-${prevdate} CICE_input/A2I_time0.nc
  cp $restdir/cice/ice.restart_file-${prevdate} CICE_restart/ice.restart_file
  cp $restdir/cice/`cat CICE_restart/ice.restart_file` CICE_restart/.
  cp $restdir/cice/u_star.nc-${prevdate} CICE_input/u_star.nc
  if [ -f $restdir/cice/sicemass.nc-${prevdate} ]; then
     cp $restdir/cice/sicemass.nc-${prevdate} CICE_input/sicemass.nc
  fi
  
  # for mom4: 
  cd $momrundir
  for restfile in `ls $restdir/mom4/ocean*-${prevdate}`; do
    ncfile=${restfile##*/}
    cp $restfile MOM4_input/${ncfile%-*}
  done
  
fi	#initial or continue run 

# prepare the atm_forcing dataset needed for this run:
cd $matmrundir/MATM_input

typeset -Z4 y1 y2
y1=$endyear
y2=$endyear
if [ $datatype = NY ]; then
  y1=1                  #for 'NY' forcing, y1 should be always '0001' !
fi
$inputdir/matm/get_${atmdata}_${datatype}.ksh $y1 $y2 $AusCOMHOME
y2=`expr $endyear + 1`
y1=$y2
if [ $datatype = NY ]; then
  y1=1
fi
if [ $endyear = $year_data_end ]; then
  y1=$endyear
fi
$inputdir/matm/get_${atmdata}_${datatype}.ksh $y1 $y2 $AusCOMHOME

#
## 3.2 Adapting or creating configuration files
#

# 3.2.1 namelist for oasis3:

nlogprt=1 	#cplout writing control: 0-no, 1-medium, 2-full output
npt1=${nproc_ice}; npc1=${ncplproc_ice}; arg1=$ice_exe; nam1=$ice_exe
npt2=${nproc_atm}; npc2=${ncplproc_atm}; arg2=$atm_exe; nam2=$atm_exe
npt3=${nproc_oce}; npc3=${ncplproc_oce}; arg3=$oce_exe; nam3=$oce_exe

#-- buffered MPI Send for coupling communication
#      yes: buffered send   (for MPI, or MPI2 without 'mailbox')
#       no: simple send     (for MPI2 with big enough 'mailbox')
#--------------------------------------------------------------------------------------
#bsend=yes      # needs larger buffer size for MPI_Bsend operation: to make it work,
                #       we've doubled "il_bufsendsize" in oasis3/src/inicmc.F!
bsend=no	# this one works fine, and is recommended! 

if [ ${bsend} = no ]; then
  nobsend="NOBSEND"
else
  nobsend=""
fi
if [ $chan = 'MPI1' ]; then
  arg1=""; arg2=""; arg3=""
fi

#
# get and adapt file namcouple
#

cd $oasisrundir

cp -f /home/565/pju565/AusCOM1.0/input/oasis3/namcouple_31fields_mom4p1_pubrel_18dec2009_wind_rotate	namcouple
ed namcouple <<eof
g/#Channel/s/#Channel/${chan} ${nobsend}/
g/#Mod1procs/s/#Mod1procs/ $npt1 $npc1 $arg1 /
g/#Mod2procs/s/#Mod2procs/ $npt2 $npc2 $arg2 /
g/#Mod3procs/s/#Mod3procs/ $npt3 $npc3 $arg3 /
g/#Mod1_name/s/#Mod1_name/ $nam1 /
g/#Mod2_name/s/#Mod2_name/ $nam2 /
g/#Mod3_name/s/#Mod3_name/ $nam3 /
g/#Runtime_sec/s/#Runtime_sec/${runtime}/
g/#Inidate/s/#Inidate/${date}/
g/#Caltype/s/#Caltype/${caltype}/
g/#NLOGPRT/s/#NLOGPRT/${nlogprt}/
g/#CPL_intv_ai/s/#CPL_intv_ai/${dt_cpl_ai}/
g/#CPL_intv_io/s/#CPL_intv_io/${dt_cpl_io}/
g/#DT_OCE/s/#DT_OCE/${dt_oce}/
g/#DT_ATM/s/#DT_ATM/${dt_atm}/
g/#DT_ICE/s/#DT_ICE/${dt_ice}/
w
q
eof

# 3.2.2 namelist for matm coupling 

cd $matmrundir

cat > input_atm.nml << eof
&coupling
 init_date=${iniyear}${inimonth}${iniday}
 inidate=$date
 truntime0=$truntime0
 runtime=$runtime
 dt_cpl=$dt_cpl_ai
 dt_atm=$dt_atm
 dataset=$atm_forcing
 runtype='${datatype}'
 caltype=$caltype
 days_per_year=$days_this_year
 chk_a2i_fields=.true.
 chk_i2a_fields=.true.
&end
eof

# get and adapt the forcing pointer file:
cp -f $inputdir/matm/${atmdata}_fields_$datatype.table data_4_matm.table
ed data_4_matm.table <<eof
g/#YEAR/s/#YEAR/$endyear/
g/#FORCING/s/#FORCING/MATM_input/
w
q
eof

# 3.2.3 namelists for cice 

# a. standalone mode input
#
cd $cicerundir

npt_cice=`expr $runtime / $dt_ice`
if [ $nmonth != 0 ]; then         	#ie, nmonth=1, a whole month run
  histfreq="'m','x','x','x','x'"; hist_avg=.true.; dumpfreq="'m'"; dumpfreq_n=$nmonth
else					#ie, nmonth=0, an nday run 
  histfreq="'1','x','x','x','x'"; hist_avg=.false.; dumpfreq="'d'"; dumpfreq_n=$nday
fi			#hist_avg=.false. would output snapshot hist
mixedocean=.false.      #use or not use the mixed ocean layer

# variables related to ice thickness sensitivity
#
# conductivity MU71 or bubbly
conduct="'bubbly'"
# ridging folding scale default 4
mu_rdg=2.0
# turning angle default 0 degrees
cosw=1.00
sinw=0.0000
# shortwave parametrisation default or dEdd
shortwave="'default'"
# dEdd tuning parameters defs 0.
R_ice=0.0
R_pnd=0.0
R_snw=0.0
# albedos for ice default 0.78 and 0.36
albicev=0.86
albicei=0.44
# albedos for snow default 0.78 and 0.36
albsnowv=0.98
albsnowi=0.70
# snowpatchiness default 0.02
snowpatch=0.01
# change in temperature to give dalb_mlt change default 1.0
dT_mlt=1.0
# albedo change per dT_mlt change in temperature default -0.05
dalb_mlt=-0.02
# maximum thickness of ice that rafts (m) default 1.0
maxraft=0.5
# thickness above which ice albedo is constant (m) default 0.5
ahmax=0.1
# albedo weigths
# visible, direct default 0.00318
awtvdr=0.00318
# near IR, direct default 0.00182
awtidr=0.00182
# visible, diffuse default 0.63282
awtvdf=0.63282
# near IR, diffuse default 0.36218
awtidf=0.36218
# linear_S or constant freezing temp, default linear_S
Tfrzpt="'linear_S'"
# minimum ice-ocean friction velocity def. 0.005
ustar_min=0.0005
# Freezing point of ocean water def -1.8
Tocnfrz=-1.8
# ice-ocean drag def. 0.00536
dragio=0.00536
# ice-ocean heat transfer coefficient def. 0.004
chio=0.004
# ice surfare roughness length, def 0.0005 m
iceruf=0.0005

cp -f $inputdir/cice/cice4.1_in.nml.sis2.output_every_timestep	cice_in.nml

ed cice_in.nml <<eof
g/#DAYS_per_year/s/#DAYS_per_year/${days_this_year}/
g/#YEAR_init/s/#YEAR_init/${iniyear}/
g/#DT_CICE/s/#DT_CICE/${dt_ice}/
g/#NPT/s/#NPT/${npt_cice}/
g/#RUNTYPE/s/#RUNTYPE/${runtype}/
g/#HISTFREQ/s/#HISTFREQ/${histfreq}/
g/#HIST_AVG/s/#HIST_AVG/${hist_avg}/
g/#DUMPFREQ/s/#DUMPFREQ/${dumpfreq}/
g/#DUMPFR_N/s/#DUMPFR_N/${dumpfreq_n}/
g/#RESTART/s/#RESTART/${Lrestart}/
g/#ICE_IC/s/#ICE_IC/${ice_ic}/
g/#FYEAR_init/s/#FYEAR_init/${iniyear}/
g/#MIXEDOCN/s/#MIXEDOCN/${mixedocean}/
g/#NPROCS/s/#NPROCS/${nproc_ice}/
g/#MU_RDG/s/#MU_RDG/${mu_rdg}/
g/#CONDUCT/s/#CONDUCT/${conduct}/
g/#SHORTWAVE/s/#SHORTWAVE/${shortwave}/
g/#R_ICE/s/#R_ICE/${R_ice}/
g/#R_PND/s/#R_PND/${R_pnd}/
g/#R_SNW/s/#R_SNW/${R_snw}/
g/#SNOWPATCH/s/#SNOWPATCH/${snowpatch}/
g/#AHMAX/s/#AHMAX/${ahmax}/
g/#DT_MLT/s/#DT_MLT/${dT_mlt}/
g/#DALB_MLT/s/#DALB_MLT/${dalb_mlt}/
g/#MAXRAFT/s/#MAXRAFT/${maxraft}/
g/#ALBICEI/s/#ALBICEI/${albicei}/
g/#ALBICEV/s/#ALBICEV/${albicev}/
g/#ALBSNOWI/s/#ALBSNOWI/${albsnowi}/
g/#ALBSNOWV/s/#ALBSNOWV/${albsnowv}/
g/#AWTVDF/s/#AWTVDF/${awtvdf}/
g/#AWTIDF/s/#AWTIDF/${awtidf}/
g/#AWTVDR/s/#AWTVDR/${awtvdr}/
g/#AWTIDR/s/#AWTIDR/${awtidr}/
g/#TFRZPT/s/#TFRZPT/${Tfrzpt}/
g/#COSW/s/#COSW/${cosw}/
g/#SINW/s/#SINW/${sinw}/
g/#USTAR_MIN/s/#USTAR_MIN/${ustar_min}/
g/#TOCNFRZ/s/#TOCNFRZ/${Tocnfrz}/
g/#DRAGIO/s/#DRAGIO/${dragio}/
g/#CHIO/s/#CHIO/${chio}/
g/#ICERUF/s/#ICERUF/${iceruf}/
w
q
eof

# b. namelist for coupling purpose

POP_ICEDIAG='.true.'		#use POP approach for ice formation/melting
GFDL_FLUXES='.false.'
if [ $boundary_layer = gfdl ]; then
  GFDL_FLUXES='.true.'		#use GFDL code for surface flux calculation
  cat > input_ice_gfdl.nml << eof
&surface_flux_nml
 no_neg_q              = .false.
 use_virtual_temp      = .true.
 alt_gustiness         = .false.
 old_dtaudv            = .false.
 use_mixing_ratio      = .false.
 gust_const            =  1.0
 gust_min              =  0.0
 ncar_ocean_flux       = .true.
 ncar_ocean_flux_orig  = .false.
 raoult_sat_vap        = .false.
/
&ocean_rough_nml
 roughness_mom   = 5.8e-5
 roughness_heat  = 5.8e-5
 roughness_moist = 5.8e-5
 roughness_min   = 1.0e-6
 charnock = 0.032
 rough_scheme = 'beljaars'
 do_highwind = .false.
 do_cap40    = .false.
 zcoh1 = 0.0
 zcoq1 = 0.0
/
eof
cat > input_ice_monin.nml << eof
&monin_obukhov_nml
neutral=.true.
&end
eof
fi	#if boundary_layer=gfdl

cat > input_ice.nml << eof
&coupling_nml
 init_date=${iniyear}${inimonth}${iniday}
 caltype=$caltype
 jobnum=$jobnum
 inidate=$date
 runtime0=$truntime0
 runtime=$runtime
 dt_cpl_ai=$dt_cpl_ai
 dt_cpl_io=$dt_cpl_io
 dt_cice=$dt_ice
 pop_icediag=$POP_ICEDIAG
 ice_pressure_on=.true.
 ice_fwflux=.true.
 use_ocnslope=.false.
 use_umask=.false.
 rotate_winds=.false.
 limit_icemelt=.false.
 meltlimit=-200.0
 use_core_runoff=.true.
 precip_factor=1.0
 cst_ocn_albedo=.true.
 ocn_albedo=0.1
 gfdl_surface_flux=$GFDL_FLUXES
 chk_gfdl_roughness=.true.
 chk_frzmlt_sst=.true.
 chk_i2o_fields=.true.
 chk_o2i_fields=.true.
 chk_i2a_fields=.true.
 chk_a2i_fields=.true.
&end
eof

# 3.2.4 namelists for mom4p1

cd $momrundir

# a. standalone mode input namelist file
#cp -f $inputdir/mom4/mom4_in.nml	input.nml
cp -f $inputdir/mom4p1_pubrel_18dec2009/mom4_in_20101214.nml input.nml

alap=1.0e5
truncate_velocity='.true.'  
truncate_verbose='.true.'
if [[ $year -gt $iniyear ]]; then
  truncate_velocity='.false.'
  truncate_verbose='.false.'
fi
 
#temp_restore_tscale=30.0	#sst restoring time scale of 30 days
temp_restore_tscale=-1.0	#NO SST restoration!
#salt_restore_tscale=60.0	#sss restoring time scale of 60 days
salt_restore_tscale=15.0	#strong SSS relaxation as 'recommended'
#salt_restore_tscale=-1		#NO SSS restoration!
use_waterflux='.true.'
layout=$oce_nx,$oce_ny		#mpi partitioning pattern
Simple_frazil='.false.'		#simple temp frazil. if '.f.' use complicated scheme
                                #                    and allow multi-layer frazil.
Accurate_frazil='.true.'        #accurate temp frazil. must be .t. if Simple_frazil=.f. 
                                #		     vice versa.	
TL_frazil='.false.'		#top layer frazil. if '.f.' multi-layer frazil 

diff_cbt_iw=0.1e-4              #'background diffusion' when BL profile is NOT used. 
                                # 1.e-4 m2/s is the default value
visc_cbu_iw=1.0e-4              #'BG' vertical vicocity
convection='.true.'
aredi=600.
agm=100.
smax=0.002
swidth=0.002
ricr=0.3

ed input.nml <<eof
g/#NMONTH/s/#NMONTH/${nmonth}/
g/#NDAY/s/#NDAY/${nday}/
g/#SYEAR/s/#SYEAR/${iniyear}/
g/#SMON/s/#SMON/${inimonth}/
g/#SDAY/s/#SDAY/${iniday}/
g/#CAL_TYPE/s/#CAL_TYPE/${cal_type}/
g/#DT_CPL/s/#DT_CPL/${dt_cpl_io}/
g/#DT_OCE/s/#DT_OCE/${dt_oce}/
g/#LAYOUT/s/#LAYOUT/${layout}/
g/#VLIMIT/s/#VLIMIT/${truncate_velocity}/
g/#VWARN/s/#VWARN/${truncate_verbose}/
g/#SST_restoring/s/#SST_restoring/${temp_restore_tscale}/
g/#SSS_restoring/s/#SSS_restoring/${salt_restore_tscale}/
g/#Freezing_simple/s/#Freezing_simple/${Simple_frazil}/
g/#Freezing_accurate/s/#Freezing_accurate/${Accurate_frazil}/
g/#TL_frazil_only/s/#TL_frazil_only/${TL_frazil}/
g/#DIFF_CBT_IW/s/#DIFF_CBT_IW/${diff_cbt_iw}/
g/#VISC_CBU_IW/s/#VISC_CBU_IW/${visc_cbu_iw}/
g/#CONVECTION/s/#CONVECTION/${convection}/
g/#AREDI/s/#AREDI/${aredi}/
g/#AGM/s/#AGM/${agm}/
g/#SMAX/s/#SMAX/${smax}/
g/#SWIDTH/s/#SWIDTH/${swidth}/
g/#RICR/s/#RICR/${ricr}/
g/#USE_waterflux/s/#USE_waterflux/${use_waterflux}/
w
q
eof


# RASF (old style AusCOM)
if [ ! -f mom4_in.nml ]; then
ln -s  input.nml mom4_in.nml
fi

#'base_time' is read in from diag_table, and must NOT be changed during the exp.
if [ $jobnum = 1 ]; then 
cp -f $inputdir/mom4/diag_table_20101208		INPUT/diag_table
ed INPUT/diag_table <<eof
g/#SYEAR/s/#SYEAR/${year}/
g/#SMON/s/#SMON/${month}/
g/#SDAY/s/#SDAY/${day}/
w
q
eof
fi

# b. namelist for coupling purpose
#

icemlt_factor=1.0	#if < 1, reduce the potential ice melt
			#only usable when POP_icediag=.f. 
frazil_factor=0.5	#mom4 uses two-level frog time stepping but cice
			#uses forward time-stepping (see comments in code)
frazil_factor=1.0	#CH: MOM4 and CICE use same (two-timelevel) stepping!

cat >> input.nml << eof
&auscom_ice_nml
 dt_cpl=$dt_cpl_io
 do_ice_once=.false.
 pop_icediag=$POP_ICEDIAG
 kmxice=5 
 fixmeltT=.false.
 Tmelt=-.216
 use_ioaice=.true.
 aice_cutoff=0.15
 icemlt_factor=$icemlt_factor
 frazil_factor=$frazil_factor 
 iceform_adj_salt=.false.
 sign_stflx=1.0
/
eof

#RASF
if [ ! -f data_table ]; then
ln -s INPUT/*table .
fi
#############################################################################
#
# 4. Launch/Execute the AusCOM Coupled Model on VAYU
#
#############################################################################
set -e

echo "`date` :  ${jobnum} ${date} - starting mpirun/mpiexec" >> $jobdir/${expid}.log

echo
echo "*** mpirun/mpiexec started at: " `date` "***"
echo

#David Singleton's solution to the bad performance of model: 
export PATH=/opt/anumpirun/2.1.16a/bin:$PATH

sleep 10
cd $rundir
if [[ $DEBUG = "yes" ]]; then
    mpirun --debug --mca mpi_paffinity_alone 1 -wd $oasisrundir -n $nproc_cpl $rundir/$oa3_exe : \
                                       -wd $cicerundir -n $nproc_ice $rundir/$ice_exe : \
                                       -wd $matmrundir -n $nproc_atm $rundir/$atm_exe : \
                                       -wd $momrundir -n $nproc_oce $rundir/$oce_exe
else
    mpirun --mca mpi_paffinity_alone 1 -wd $oasisrundir -n $nproc_cpl $rundir/$oa3_exe : \
                                       -wd $cicerundir -n $nproc_ice $rundir/$ice_exe : \
                                       -wd $matmrundir -n $nproc_atm $rundir/$atm_exe : \
                                       -wd $momrundir -n $nproc_oce $rundir/$oce_exe
fi
echo
echo "*** job completed  at: " `date` "***" 
echo
echo "`date` :  ${jobnum} ${enddate} - done mpirun/mpiexec!" >> $jobdir/${expid}.log
echo 'Error code at end of simulation :'$?

#############################################################################
#
# 5. Postprocessing: Saving the Output Data
#
#############################################################################

cd $matmrundir
rm MATM_input/*.$endyear.nc	#remove the used forcing data 

#
## 5.1 Output files of the coupler (OASIS3)
#

# Restart files 
cd $oasisrundir
for resfile in `ls ?2?.nc`; do
  mv $resfile ${restdir}/oasis3/${resfile}-${enddate} 
done

#
## 5.2 Output files of the ocean (mom4)
#

# Restart files
cd $momrundir/RESTART/
for restfile in `ls ocean_*`; do
  mv $restfile ${restdir}/mom4/${restfile}-${enddate}
done  

# History files
cd $momrundir/MOM4_hist
sdir=$momrundir/MOM4_hist 
tdir=${histdir}/mom4
tool=$AusCOMHOME/bin/do_mppncombine.ksh
#archjob=`qsub $tool -v sdir=$sdir,tdir=$tdir,idate=${enddate}`
archjob=`qsub $tool -v bdir=$bindir,sdir=$sdir,tdir=$tdir,idate=${enddate}`

#
## 5.4 Output files of the ice (cice)
#

cd $cicerundir

# Restart files
mv CICE_input/A2I_time1.nc       ${restdir}/cice/A2I_time1.nc-${enddate}
mv CICE_restart/ice.restart_file ${restdir}/cice/ice.restart_file-${enddate}
mv CICE_restart/iced.*           ${restdir}/cice/. 
if [ -f u_star.nc ]; then
  mv u_star.nc			 ${restdir}/cice/u_star.nc-${enddate}
fi
if [ -f sicemass.nc ]; then
  mv sicemass.nc			 ${restdir}/cice/sicemass.nc-${enddate}
fi

# History files (iceh_*.nc)
mv CICE_hist/*			${histdir}/cice/.
#grep -e "Arctic" -B 1 -A 10 ice_diag.d > ${histdir}/cice/ice_diag.${enddate}
cp -p ice_diag.d ${histdir}/cice/ice_diag.${enddate}
for fio in iceout??; do
    cp -p $fio ${histdir}/cice/$fio.${enddate}
done

#
## 5.5 Store coupling fields output (if any), e.g., fields_i2o_in_ice.nc etc. 
#
#cd $oasisrundir
cd $cicerundir
if [[ `ls fields*.nc | wc -w` -gt 0 ]]; then
for tmpfile in `ls fields*.nc`; do
  mv -f ${tmpfile} ${restdir}/oasis3/${tmpfile}_${enddate}
done
fi

cd $matmrundir
if [[ `ls fields*.nc | wc -w` -gt 0 ]]; then
for tmpfile in `ls fields*.nc`; do
  mv -f ${tmpfile} ${restdir}/oasis3/${tmpfile}_${enddate}
done
fi

#############################################################################
#
# 6. Submission of the next job
#
#############################################################################

cd  ${jobdir}

#
# Number of the next job
#
(( nextjob = ${jobnum} + 1 ))

#
# update .date and .log file
#
if [ -f ${expid}.date ]; then
  mv ${expid}.date  ${expid}.date_${jobnum}
fi
truntime0=`expr ${truntime0} + ${runtime}` 
echo "${nextyear} ${nextmonth} ${nextday} ${nextjob} ${truntime0}" > ${expid}.date
echo "`date` :  ${jobnum} ${enddate} - done post-processing!" >> ${expid}.log

#
# Check whether final date is reached. If not, keep going
# 
if [[ $nextdate -gt $finaldate ]]; then
  echo "Experiment over"
  echo "`date` :  Experiment over" >> ${expid}.log
else
  next_jobid=`qsub -W depend=after:${archjob} run_auscom.VAYU`
  echo "`date` :  New run is submitted."
fi

#############################################################################
#
# 7. Epilogue 
#
#############################################################################

date
exit
